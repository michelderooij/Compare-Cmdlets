<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>Selected.System.Management.Automation.FunctionInfo</T>
      <T>System.Management.Automation.PSCustomObject</T>
      <T>System.Object</T>
    </TN>
    <MS>
      <S N="Name">Connect-ExchangeOnline</S>
      <Obj N="Parameters" RefId="1">
        <TN RefId="1">
          <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Management.Automation.ParameterMetadata, System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
          <T>System.Object</T>
        </TN>
        <DCT>
          <En>
            <S N="Key">ConnectionUri</S>
            <Obj N="Value" RefId="2">
              <TN RefId="2">
                <T>System.Management.Automation.ParameterMetadata</T>
                <T>System.Object</T>
              </TN>
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConnectionUri</S>
                <Obj N="ParameterType" RefId="3">
                  <TN RefId="3">
                    <T>System.RuntimeType</T>
                    <T>System.Reflection.TypeInfo</T>
                    <T>System.Type</T>
                    <T>System.Reflection.MemberInfo</T>
                    <T>System.Object</T>
                  </TN>
                  <ToString>System.String</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.String</S>
                    <S N="AssemblyQualifiedName">System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">84c086bf-92af-3589-9048-42698b5ba1a6</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">String</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <Obj N="BaseType" RefId="4">
                      <S>System.Object</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554623</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="3" />
                    <Obj N="GenericTypeParameters" RefId="5">
                      <TN RefId="4">
                        <T>System.Type[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST />
                    </Obj>
                    <Obj N="DeclaredConstructors" RefId="6">
                      <TN RefId="5">
                        <T>System.Reflection.ConstructorInfo[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST>
                        <S>Void .ctor(Char[])</S>
                        <S>Void .ctor(Char[], Int32, Int32)</S>
                        <S>Void .ctor(Char*)</S>
                        <S>Void .ctor(Char*, Int32, Int32)</S>
                        <S>Void .ctor(SByte*)</S>
                        <S>Void .ctor(SByte*, Int32, Int32)</S>
                        <S>Void .ctor(SByte*, Int32, Int32, System.Text.Encoding)</S>
                        <S>Void .ctor(Char, Int32)</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Char])</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredEvents" RefId="7">
                      <TN RefId="6">
                        <T>System.Reflection.EventInfo[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST />
                    </Obj>
                    <Obj N="DeclaredFields" RefId="8">
                      <TN RefId="7">
                        <T>System.Reflection.FieldInfo[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST>
                        <S>Int32 _stringLength</S>
                        <S>Char _firstChar</S>
                        <S>System.String Empty</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="9">
                      <TN RefId="8">
                        <T>System.Reflection.MemberInfo[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST>
                        <S>System.String FastAllocateString(Int32)</S>
                        <S>Void Intern(System.Runtime.CompilerServices.StringHandleOnStack)</S>
                        <S>System.String Intern(System.String)</S>
                        <S>Void IsInterned(System.Runtime.CompilerServices.StringHandleOnStack)</S>
                        <S>System.String IsInterned(System.String)</S>
                        <S>Void InternalCopy(System.String, IntPtr, Int32)</S>
                        <S>Int32 GetBytesFromEncoding(Byte*, Int32, System.Text.Encoding)</S>
                        <S>Boolean EqualsHelper(System.String, System.String)</S>
                        <S>Int32 CompareOrdinalHelper(System.String, Int32, Int32, System.String, Int32, Int32)</S>
                        <S>Boolean EqualsOrdinalIgnoreCase(System.String, System.String)</S>
                        <S>Boolean EqualsOrdinalIgnoreCaseNoLengthCheck(System.String, System.String)</S>
                        <S>Int32 CompareOrdinalHelper(System.String, System.String)</S>
                        <S>Int32 Compare(System.String, System.String)</S>
                        <S>Int32 Compare(System.String, System.String, Boolean)</S>
                        <S>Int32 Compare(System.String, System.String, System.StringComparison)</S>
                        <S>Int32 Compare(System.String, System.String, System.Globalization.CultureInfo, System.Globalization.CompareOptions)</S>
                        <S>Int32 Compare(System.String, System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, Boolean)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, System.Globalization.CultureInfo, System.Globalization.CompareOptions)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, System.StringComparison)</S>
                        <S>Int32 CompareOrdinal(System.String, System.String)</S>
                        <S>Int32 CompareOrdinal(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 CompareOrdinal(System.String, Int32, System.String, Int32, Int32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(System.String)</S>
                        <S>Boolean EndsWith(System.String)</S>
                        <S>Boolean EndsWith(System.String, System.StringComparison)</S>
                        <S>Boolean EndsWith(System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Boolean EndsWith(Char)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(System.String)</S>
                        <S>Boolean Equals(System.String, System.StringComparison)</S>
                        <S>Boolean Equals(System.String, System.String)</S>
                        <S>Boolean Equals(System.String, System.String, System.StringComparison)</S>
                        <S>Boolean op_Equality(System.String, System.String)</S>
                        <S>Boolean op_Inequality(System.String, System.String)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>Int32 GetHashCode(System.StringComparison)</S>
                        <S>Int32 GetHashCodeOrdinalIgnoreCase()</S>
                        <S>Int32 GetHashCode(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetHashCode(System.ReadOnlySpan`1[System.Char], System.StringComparison)</S>
                        <S>Int32 GetHashCodeOrdinalIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetNonRandomizedHashCode()</S>
                        <S>Int32 GetNonRandomizedHashCode(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetNonRandomizedHashCodeOrdinalIgnoreCase()</S>
                        <S>Int32 GetNonRandomizedHashCodeOrdinalIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetNonRandomizedHashCodeOrdinalIgnoreCaseSlow(UInt32, UInt32, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean StartsWith(System.String)</S>
                        <S>Boolean StartsWith(System.String, System.StringComparison)</S>
                        <S>Boolean StartsWith(System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Boolean StartsWith(Char)</S>
                        <S>Void CheckStringComparison(System.StringComparison)</S>
                        <S>System.Globalization.CompareOptions GetCaseCompareOfComparisonCulture(System.StringComparison)</S>
                        <S>System.Globalization.CompareOptions GetCompareOptionsFromOrdinalStringComparison(System.StringComparison)</S>
                        <S>System.String Ctor(Char[])</S>
                        <S>System.String Ctor(Char[], Int32, Int32)</S>
                        <S>System.String Ctor(Char*)</S>
                        <S>System.String Ctor(Char*, Int32, Int32)</S>
                        <S>System.String Ctor(SByte*)</S>
                        <S>System.String Ctor(SByte*, Int32, Int32)</S>
                        <S>System.String CreateStringForSByteConstructor(Byte*, Int32)</S>
                        <S>System.String Ctor(SByte*, Int32, Int32, System.Text.Encoding)</S>
                        <S>System.String Ctor(Char, Int32)</S>
                        <S>System.String Ctor(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Create[TState](Int32, TState, System.Buffers.SpanAction`2[System.Char,TState])</S>
                        <S>System.String Create(System.IFormatProvider, System.Runtime.CompilerServices.DefaultInterpolatedStringHandler ByRef)</S>
                        <S>System.String Create(System.IFormatProvider, System.Span`1[System.Char], System.Runtime.CompilerServices.DefaultInterpolatedStringHandler ByRef)</S>
                        <S>System.ReadOnlySpan`1[System.Char] op_Implicit(System.String)</S>
                        <S>Boolean TryGetSpan(Int32, Int32, System.ReadOnlySpan`1[System.Char] ByRef)</S>
                        <S>System.Object Clone()</S>
                        <S>System.String Copy(System.String)</S>
                        <S>Void CopyTo(Int32, Char[], Int32, Int32)</S>
                        <S>Void CopyTo(System.Span`1[System.Char])</S>
                        <S>Boolean TryCopyTo(System.Span`1[System.Char])</S>
                        <S>Char[] ToCharArray()</S>
                        <S>Char[] ToCharArray(Int32, Int32)</S>
                        <S>Boolean IsNullOrEmpty(System.String)</S>
                        <S>Boolean IsNullOrWhiteSpace(System.String)</S>
                        <S>Char&amp; GetPinnableReference()</S>
                        <S>Char&amp; GetRawStringData()</S>
                        <S>UInt16&amp; GetRawStringDataAsUInt16()</S>
                        <S>System.String CreateStringFromEncoding(Byte*, Int32, System.Text.Encoding)</S>
                        <S>System.String CreateFromChar(Char)</S>
                        <S>System.String CreateFromChar(Char, Char)</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>System.CharEnumerator GetEnumerator()</S>
                        <S>System.Collections.Generic.IEnumerator`1[System.Char] System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator()</S>
                        <S>System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</S>
                        <S>System.Text.StringRuneEnumerator EnumerateRunes()</S>
                        <S>Int32 wcslen(Char*)</S>
                        <S>Int32 strlen(Byte*)</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>Boolean IsNormalized()</S>
                        <S>Boolean IsNormalized(System.Text.NormalizationForm)</S>
                        <S>System.String Normalize()</S>
                        <S>System.String Normalize(System.Text.NormalizationForm)</S>
                        <S>Char get_Chars(Int32)</S>
                        <S>Int32 get_Length()</S>
                        <S>System.String System.IParsable&lt;System.String&gt;.Parse(System.String, System.IFormatProvider)</S>
                        <S>Boolean System.IParsable&lt;System.String&gt;.TryParse(System.String, System.IFormatProvider, System.String ByRef)</S>
                        <S>System.String System.ISpanParsable&lt;System.String&gt;.Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean System.ISpanParsable&lt;System.String&gt;.TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, System.String ByRef)</S>
                        <S>Void CopyStringContent(System.String, Int32, System.String)</S>
                        <S>System.String Concat(System.Object)</S>
                        <S>System.String Concat(System.Object, System.Object)</S>
                        <S>System.String Concat(System.Object, System.Object, System.Object)</S>
                        <S>System.String Concat(System.Object[])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Concat[T](System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String Concat(System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>System.String Concat(System.String, System.String)</S>
                        <S>System.String Concat(System.String, System.String, System.String)</S>
                        <S>System.String Concat(System.String, System.String, System.String, System.String)</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.String[])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String Format(System.String, System.Object)</S>
                        <S>System.String Format(System.String, System.Object, System.Object)</S>
                        <S>System.String Format(System.String, System.Object, System.Object, System.Object)</S>
                        <S>System.String Format(System.String, System.Object[])</S>
                        <S>System.String Format(System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object)</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object, System.Object)</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object[])</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Format[TArg0](System.IFormatProvider, System.Text.CompositeFormat, TArg0)</S>
                        <S>System.String Format[TArg0,TArg1](System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1)</S>
                        <S>System.String Format[TArg0,TArg1,TArg2](System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1, TArg2)</S>
                        <S>System.String Format(System.IFormatProvider, System.Text.CompositeFormat, System.Object[])</S>
                        <S>System.String Format(System.IFormatProvider, System.Text.CompositeFormat, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Format[TArg0,TArg1,TArg2](System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1, TArg2, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Insert(Int32, System.String)</S>
                        <S>System.String Join(Char, System.String[])</S>
                        <S>System.String Join(Char, System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String Join(System.String, System.String[])</S>
                        <S>System.String Join(System.String, System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String Join(Char, System.String[], Int32, Int32)</S>
                        <S>System.String Join(System.String, System.String[], Int32, Int32)</S>
                        <S>System.String JoinCore(System.ReadOnlySpan`1[System.Char], System.String[], Int32, Int32)</S>
                        <S>System.String Join(System.String, System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>System.String Join(Char, System.Object[])</S>
                        <S>System.String Join(Char, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Join(System.String, System.Object[])</S>
                        <S>System.String Join(System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String JoinCore(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Join[T](Char, System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String Join[T](System.String, System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String JoinCore[T](System.ReadOnlySpan`1[System.Char], System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String JoinCore(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String PadLeft(Int32)</S>
                        <S>System.String PadLeft(Int32, Char)</S>
                        <S>System.String PadRight(Int32)</S>
                        <S>System.String PadRight(Int32, Char)</S>
                        <S>System.String Remove(Int32, Int32)</S>
                        <S>System.String Remove(Int32)</S>
                        <S>System.String Replace(System.String, System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>System.String Replace(System.String, System.String, System.StringComparison)</S>
                        <S>System.String ReplaceCore(System.String, System.String, System.Globalization.CompareInfo, System.Globalization.CompareOptions)</S>
                        <S>System.String ReplaceCore(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Globalization.CompareInfo, System.Globalization.CompareOptions)</S>
                        <S>System.String Replace(Char, Char)</S>
                        <S>System.String Replace(System.String, System.String)</S>
                        <S>System.String ReplaceHelper(Int32, System.String, System.ReadOnlySpan`1[System.Int32])</S>
                        <S>System.String ReplaceLineEndings()</S>
                        <S>System.String ReplaceLineEndings(System.String)</S>
                        <S>System.String ReplaceLineEndingsCore(System.String)</S>
                        <S>Int32 IndexOfNewlineChar(System.ReadOnlySpan`1[System.Char], System.String, Int32 ByRef)</S>
                        <S>System.String ReplaceLineEndingsWithLineFeed()</S>
                        <S>System.String[] Split(Char, System.StringSplitOptions)</S>
                        <S>System.String[] Split(Char, Int32, System.StringSplitOptions)</S>
                        <S>System.String[] Split(Char[])</S>
                        <S>System.String[] Split(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String[] Split(Char[], Int32)</S>
                        <S>System.String[] Split(Char[], System.StringSplitOptions)</S>
                        <S>System.String[] Split(Char[], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] SplitInternal(System.ReadOnlySpan`1[System.Char], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String, System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String, Int32, System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String[], System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String[], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] SplitInternal(System.String, System.String[], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] CreateSplitArrayOfThisAsSoleValue(System.StringSplitOptions, Int32)</S>
                        <S>System.String[] SplitInternal(System.String, Int32, System.StringSplitOptions)</S>
                        <S>System.String[] SplitWithoutPostProcessing(System.ReadOnlySpan`1[System.Int32], System.ReadOnlySpan`1[System.Int32], Int32, Int32)</S>
                        <S>System.String[] SplitWithPostProcessing(System.ReadOnlySpan`1[System.Int32], System.ReadOnlySpan`1[System.Int32], Int32, Int32, System.StringSplitOptions)</S>
                        <S>Void MakeSeparatorListAny(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef)</S>
                        <S>Void MakeSeparatorListVectorized(System.ReadOnlySpan`1[System.Char], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef, Char, Char, Char)</S>
                        <S>Void MakeSeparatorList(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef)</S>
                        <S>Void MakeSeparatorListAny(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.String], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef, System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef)</S>
                        <S>Void CheckStringSplitOptions(System.StringSplitOptions)</S>
                        <S>System.String Substring(Int32)</S>
                        <S>System.String Substring(Int32, Int32)</S>
                        <S>Void ThrowSubstringArgumentOutOfRange(Int32, Int32)</S>
                        <S>System.String InternalSubString(Int32, Int32)</S>
                        <S>System.String ToLower()</S>
                        <S>System.String ToLower(System.Globalization.CultureInfo)</S>
                        <S>System.String ToLowerInvariant()</S>
                        <S>System.String ToUpper()</S>
                        <S>System.String ToUpper(System.Globalization.CultureInfo)</S>
                        <S>System.String ToUpperInvariant()</S>
                        <S>System.String Trim()</S>
                        <S>System.String Trim(Char)</S>
                        <S>System.String Trim(Char[])</S>
                        <S>System.String Trim(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String TrimStart()</S>
                        <S>System.String TrimStart(Char)</S>
                        <S>System.String TrimStart(Char[])</S>
                        <S>System.String TrimStart(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String TrimEnd()</S>
                        <S>System.String TrimEnd(Char)</S>
                        <S>System.String TrimEnd(Char[])</S>
                        <S>System.String TrimEnd(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String TrimWhiteSpaceHelper(System.Text.TrimType)</S>
                        <S>System.String TrimHelper(Char*, Int32, System.Text.TrimType)</S>
                        <S>System.String CreateTrimmedString(Int32, Int32)</S>
                        <S>Boolean Contains(System.String)</S>
                        <S>Boolean Contains(System.String, System.StringComparison)</S>
                        <S>Boolean Contains(Char)</S>
                        <S>Boolean Contains(Char, System.StringComparison)</S>
                        <S>Int32 IndexOf(Char)</S>
                        <S>Int32 IndexOf(Char, Int32)</S>
                        <S>Int32 IndexOf(Char, System.StringComparison)</S>
                        <S>Int32 IndexOfCharOrdinalIgnoreCase(Char)</S>
                        <S>Int32 IndexOf(Char, Int32, Int32)</S>
                        <S>Int32 IndexOfAny(Char[])</S>
                        <S>Int32 IndexOfAny(Char[], Int32)</S>
                        <S>Int32 IndexOfAny(Char[], Int32, Int32)</S>
                        <S>Int32 IndexOf(System.String)</S>
                        <S>Int32 IndexOf(System.String, Int32)</S>
                        <S>Int32 IndexOf(System.String, Int32, Int32)</S>
                        <S>Int32 IndexOf(System.String, System.StringComparison)</S>
                        <S>Int32 IndexOf(System.String, Int32, System.StringComparison)</S>
                        <S>Int32 IndexOf(System.String, Int32, Int32, System.StringComparison)</S>
                        <S>Int32 LastIndexOf(Char)</S>
                        <S>Int32 LastIndexOf(Char, Int32)</S>
                        <S>Int32 LastIndexOf(Char, Int32, Int32)</S>
                        <S>Int32 LastIndexOfAny(Char[])</S>
                        <S>Int32 LastIndexOfAny(Char[], Int32)</S>
                        <S>Int32 LastIndexOfAny(Char[], Int32, Int32)</S>
                        <S>Int32 LastIndexOf(System.String)</S>
                        <S>Int32 LastIndexOf(System.String, Int32)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, Int32)</S>
                        <S>Int32 LastIndexOf(System.String, System.StringComparison)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, System.StringComparison)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, Int32, System.StringComparison)</S>
                        <S>Void .ctor(Char[])</S>
                        <S>Void .ctor(Char[], Int32, Int32)</S>
                        <S>Void .ctor(Char*)</S>
                        <S>Void .ctor(Char*, Int32, Int32)</S>
                        <S>Void .ctor(SByte*)</S>
                        <S>Void .ctor(SByte*, Int32, Int32)</S>
                        <S>Void .ctor(SByte*, Int32, Int32, System.Text.Encoding)</S>
                        <S>Void .ctor(Char, Int32)</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Char Chars [Int32]</S>
                        <S>Int32 Length</S>
                        <S>Int32 _stringLength</S>
                        <S>Char _firstChar</S>
                        <S>System.String Empty</S>
                        <S>System.String+SearchValuesStorage</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="10">
                      <TN RefId="9">
                        <T>System.Reflection.MethodInfo[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST>
                        <S>System.String FastAllocateString(Int32)</S>
                        <S>Void Intern(System.Runtime.CompilerServices.StringHandleOnStack)</S>
                        <S>System.String Intern(System.String)</S>
                        <S>Void IsInterned(System.Runtime.CompilerServices.StringHandleOnStack)</S>
                        <S>System.String IsInterned(System.String)</S>
                        <S>Void InternalCopy(System.String, IntPtr, Int32)</S>
                        <S>Int32 GetBytesFromEncoding(Byte*, Int32, System.Text.Encoding)</S>
                        <S>Boolean EqualsHelper(System.String, System.String)</S>
                        <S>Int32 CompareOrdinalHelper(System.String, Int32, Int32, System.String, Int32, Int32)</S>
                        <S>Boolean EqualsOrdinalIgnoreCase(System.String, System.String)</S>
                        <S>Boolean EqualsOrdinalIgnoreCaseNoLengthCheck(System.String, System.String)</S>
                        <S>Int32 CompareOrdinalHelper(System.String, System.String)</S>
                        <S>Int32 Compare(System.String, System.String)</S>
                        <S>Int32 Compare(System.String, System.String, Boolean)</S>
                        <S>Int32 Compare(System.String, System.String, System.StringComparison)</S>
                        <S>Int32 Compare(System.String, System.String, System.Globalization.CultureInfo, System.Globalization.CompareOptions)</S>
                        <S>Int32 Compare(System.String, System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, Boolean)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, System.Globalization.CultureInfo, System.Globalization.CompareOptions)</S>
                        <S>Int32 Compare(System.String, Int32, System.String, Int32, Int32, System.StringComparison)</S>
                        <S>Int32 CompareOrdinal(System.String, System.String)</S>
                        <S>Int32 CompareOrdinal(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 CompareOrdinal(System.String, Int32, System.String, Int32, Int32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(System.String)</S>
                        <S>Boolean EndsWith(System.String)</S>
                        <S>Boolean EndsWith(System.String, System.StringComparison)</S>
                        <S>Boolean EndsWith(System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Boolean EndsWith(Char)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(System.String)</S>
                        <S>Boolean Equals(System.String, System.StringComparison)</S>
                        <S>Boolean Equals(System.String, System.String)</S>
                        <S>Boolean Equals(System.String, System.String, System.StringComparison)</S>
                        <S>Boolean op_Equality(System.String, System.String)</S>
                        <S>Boolean op_Inequality(System.String, System.String)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>Int32 GetHashCode(System.StringComparison)</S>
                        <S>Int32 GetHashCodeOrdinalIgnoreCase()</S>
                        <S>Int32 GetHashCode(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetHashCode(System.ReadOnlySpan`1[System.Char], System.StringComparison)</S>
                        <S>Int32 GetHashCodeOrdinalIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetNonRandomizedHashCode()</S>
                        <S>Int32 GetNonRandomizedHashCode(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetNonRandomizedHashCodeOrdinalIgnoreCase()</S>
                        <S>Int32 GetNonRandomizedHashCodeOrdinalIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 GetNonRandomizedHashCodeOrdinalIgnoreCaseSlow(UInt32, UInt32, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean StartsWith(System.String)</S>
                        <S>Boolean StartsWith(System.String, System.StringComparison)</S>
                        <S>Boolean StartsWith(System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>Boolean StartsWith(Char)</S>
                        <S>Void CheckStringComparison(System.StringComparison)</S>
                        <S>System.Globalization.CompareOptions GetCaseCompareOfComparisonCulture(System.StringComparison)</S>
                        <S>System.Globalization.CompareOptions GetCompareOptionsFromOrdinalStringComparison(System.StringComparison)</S>
                        <S>System.String Ctor(Char[])</S>
                        <S>System.String Ctor(Char[], Int32, Int32)</S>
                        <S>System.String Ctor(Char*)</S>
                        <S>System.String Ctor(Char*, Int32, Int32)</S>
                        <S>System.String Ctor(SByte*)</S>
                        <S>System.String Ctor(SByte*, Int32, Int32)</S>
                        <S>System.String CreateStringForSByteConstructor(Byte*, Int32)</S>
                        <S>System.String Ctor(SByte*, Int32, Int32, System.Text.Encoding)</S>
                        <S>System.String Ctor(Char, Int32)</S>
                        <S>System.String Ctor(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Create[TState](Int32, TState, System.Buffers.SpanAction`2[System.Char,TState])</S>
                        <S>System.String Create(System.IFormatProvider, System.Runtime.CompilerServices.DefaultInterpolatedStringHandler ByRef)</S>
                        <S>System.String Create(System.IFormatProvider, System.Span`1[System.Char], System.Runtime.CompilerServices.DefaultInterpolatedStringHandler ByRef)</S>
                        <S>System.ReadOnlySpan`1[System.Char] op_Implicit(System.String)</S>
                        <S>Boolean TryGetSpan(Int32, Int32, System.ReadOnlySpan`1[System.Char] ByRef)</S>
                        <S>System.Object Clone()</S>
                        <S>System.String Copy(System.String)</S>
                        <S>Void CopyTo(Int32, Char[], Int32, Int32)</S>
                        <S>Void CopyTo(System.Span`1[System.Char])</S>
                        <S>Boolean TryCopyTo(System.Span`1[System.Char])</S>
                        <S>Char[] ToCharArray()</S>
                        <S>Char[] ToCharArray(Int32, Int32)</S>
                        <S>Boolean IsNullOrEmpty(System.String)</S>
                        <S>Boolean IsNullOrWhiteSpace(System.String)</S>
                        <S>Char&amp; GetPinnableReference()</S>
                        <S>Char&amp; GetRawStringData()</S>
                        <S>UInt16&amp; GetRawStringDataAsUInt16()</S>
                        <S>System.String CreateStringFromEncoding(Byte*, Int32, System.Text.Encoding)</S>
                        <S>System.String CreateFromChar(Char)</S>
                        <S>System.String CreateFromChar(Char, Char)</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>System.CharEnumerator GetEnumerator()</S>
                        <S>System.Collections.Generic.IEnumerator`1[System.Char] System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator()</S>
                        <S>System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</S>
                        <S>System.Text.StringRuneEnumerator EnumerateRunes()</S>
                        <S>Int32 wcslen(Char*)</S>
                        <S>Int32 strlen(Byte*)</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>Boolean IsNormalized()</S>
                        <S>Boolean IsNormalized(System.Text.NormalizationForm)</S>
                        <S>System.String Normalize()</S>
                        <S>System.String Normalize(System.Text.NormalizationForm)</S>
                        <S>Char get_Chars(Int32)</S>
                        <S>Int32 get_Length()</S>
                        <S>System.String System.IParsable&lt;System.String&gt;.Parse(System.String, System.IFormatProvider)</S>
                        <S>Boolean System.IParsable&lt;System.String&gt;.TryParse(System.String, System.IFormatProvider, System.String ByRef)</S>
                        <S>System.String System.ISpanParsable&lt;System.String&gt;.Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean System.ISpanParsable&lt;System.String&gt;.TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, System.String ByRef)</S>
                        <S>Void CopyStringContent(System.String, Int32, System.String)</S>
                        <S>System.String Concat(System.Object)</S>
                        <S>System.String Concat(System.Object, System.Object)</S>
                        <S>System.String Concat(System.Object, System.Object, System.Object)</S>
                        <S>System.String Concat(System.Object[])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Concat[T](System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String Concat(System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>System.String Concat(System.String, System.String)</S>
                        <S>System.String Concat(System.String, System.String, System.String)</S>
                        <S>System.String Concat(System.String, System.String, System.String, System.String)</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String Concat(System.String[])</S>
                        <S>System.String Concat(System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String Format(System.String, System.Object)</S>
                        <S>System.String Format(System.String, System.Object, System.Object)</S>
                        <S>System.String Format(System.String, System.Object, System.Object, System.Object)</S>
                        <S>System.String Format(System.String, System.Object[])</S>
                        <S>System.String Format(System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object)</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object, System.Object)</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.Object[])</S>
                        <S>System.String Format(System.IFormatProvider, System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Format[TArg0](System.IFormatProvider, System.Text.CompositeFormat, TArg0)</S>
                        <S>System.String Format[TArg0,TArg1](System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1)</S>
                        <S>System.String Format[TArg0,TArg1,TArg2](System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1, TArg2)</S>
                        <S>System.String Format(System.IFormatProvider, System.Text.CompositeFormat, System.Object[])</S>
                        <S>System.String Format(System.IFormatProvider, System.Text.CompositeFormat, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Format[TArg0,TArg1,TArg2](System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1, TArg2, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Insert(Int32, System.String)</S>
                        <S>System.String Join(Char, System.String[])</S>
                        <S>System.String Join(Char, System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String Join(System.String, System.String[])</S>
                        <S>System.String Join(System.String, System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String Join(Char, System.String[], Int32, Int32)</S>
                        <S>System.String Join(System.String, System.String[], Int32, Int32)</S>
                        <S>System.String JoinCore(System.ReadOnlySpan`1[System.Char], System.String[], Int32, Int32)</S>
                        <S>System.String Join(System.String, System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>System.String Join(Char, System.Object[])</S>
                        <S>System.String Join(Char, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Join(System.String, System.Object[])</S>
                        <S>System.String Join(System.String, System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String JoinCore(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Object])</S>
                        <S>System.String Join[T](Char, System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String Join[T](System.String, System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String JoinCore[T](System.ReadOnlySpan`1[System.Char], System.Collections.Generic.IEnumerable`1[T])</S>
                        <S>System.String JoinCore(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.String])</S>
                        <S>System.String PadLeft(Int32)</S>
                        <S>System.String PadLeft(Int32, Char)</S>
                        <S>System.String PadRight(Int32)</S>
                        <S>System.String PadRight(Int32, Char)</S>
                        <S>System.String Remove(Int32, Int32)</S>
                        <S>System.String Remove(Int32)</S>
                        <S>System.String Replace(System.String, System.String, Boolean, System.Globalization.CultureInfo)</S>
                        <S>System.String Replace(System.String, System.String, System.StringComparison)</S>
                        <S>System.String ReplaceCore(System.String, System.String, System.Globalization.CompareInfo, System.Globalization.CompareOptions)</S>
                        <S>System.String ReplaceCore(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Globalization.CompareInfo, System.Globalization.CompareOptions)</S>
                        <S>System.String Replace(Char, Char)</S>
                        <S>System.String Replace(System.String, System.String)</S>
                        <S>System.String ReplaceHelper(Int32, System.String, System.ReadOnlySpan`1[System.Int32])</S>
                        <S>System.String ReplaceLineEndings()</S>
                        <S>System.String ReplaceLineEndings(System.String)</S>
                        <S>System.String ReplaceLineEndingsCore(System.String)</S>
                        <S>Int32 IndexOfNewlineChar(System.ReadOnlySpan`1[System.Char], System.String, Int32 ByRef)</S>
                        <S>System.String ReplaceLineEndingsWithLineFeed()</S>
                        <S>System.String[] Split(Char, System.StringSplitOptions)</S>
                        <S>System.String[] Split(Char, Int32, System.StringSplitOptions)</S>
                        <S>System.String[] Split(Char[])</S>
                        <S>System.String[] Split(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String[] Split(Char[], Int32)</S>
                        <S>System.String[] Split(Char[], System.StringSplitOptions)</S>
                        <S>System.String[] Split(Char[], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] SplitInternal(System.ReadOnlySpan`1[System.Char], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String, System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String, Int32, System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String[], System.StringSplitOptions)</S>
                        <S>System.String[] Split(System.String[], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] SplitInternal(System.String, System.String[], Int32, System.StringSplitOptions)</S>
                        <S>System.String[] CreateSplitArrayOfThisAsSoleValue(System.StringSplitOptions, Int32)</S>
                        <S>System.String[] SplitInternal(System.String, Int32, System.StringSplitOptions)</S>
                        <S>System.String[] SplitWithoutPostProcessing(System.ReadOnlySpan`1[System.Int32], System.ReadOnlySpan`1[System.Int32], Int32, Int32)</S>
                        <S>System.String[] SplitWithPostProcessing(System.ReadOnlySpan`1[System.Int32], System.ReadOnlySpan`1[System.Int32], Int32, Int32, System.StringSplitOptions)</S>
                        <S>Void MakeSeparatorListAny(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef)</S>
                        <S>Void MakeSeparatorListVectorized(System.ReadOnlySpan`1[System.Char], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef, Char, Char, Char)</S>
                        <S>Void MakeSeparatorList(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef)</S>
                        <S>Void MakeSeparatorListAny(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.String], System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef, System.Collections.Generic.ValueListBuilder`1[System.Int32] ByRef)</S>
                        <S>Void CheckStringSplitOptions(System.StringSplitOptions)</S>
                        <S>System.String Substring(Int32)</S>
                        <S>System.String Substring(Int32, Int32)</S>
                        <S>Void ThrowSubstringArgumentOutOfRange(Int32, Int32)</S>
                        <S>System.String InternalSubString(Int32, Int32)</S>
                        <S>System.String ToLower()</S>
                        <S>System.String ToLower(System.Globalization.CultureInfo)</S>
                        <S>System.String ToLowerInvariant()</S>
                        <S>System.String ToUpper()</S>
                        <S>System.String ToUpper(System.Globalization.CultureInfo)</S>
                        <S>System.String ToUpperInvariant()</S>
                        <S>System.String Trim()</S>
                        <S>System.String Trim(Char)</S>
                        <S>System.String Trim(Char[])</S>
                        <S>System.String Trim(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String TrimStart()</S>
                        <S>System.String TrimStart(Char)</S>
                        <S>System.String TrimStart(Char[])</S>
                        <S>System.String TrimStart(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String TrimEnd()</S>
                        <S>System.String TrimEnd(Char)</S>
                        <S>System.String TrimEnd(Char[])</S>
                        <S>System.String TrimEnd(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String TrimWhiteSpaceHelper(System.Text.TrimType)</S>
                        <S>System.String TrimHelper(Char*, Int32, System.Text.TrimType)</S>
                        <S>System.String CreateTrimmedString(Int32, Int32)</S>
                        <S>Boolean Contains(System.String)</S>
                        <S>Boolean Contains(System.String, System.StringComparison)</S>
                        <S>Boolean Contains(Char)</S>
                        <S>Boolean Contains(Char, System.StringComparison)</S>
                        <S>Int32 IndexOf(Char)</S>
                        <S>Int32 IndexOf(Char, Int32)</S>
                        <S>Int32 IndexOf(Char, System.StringComparison)</S>
                        <S>Int32 IndexOfCharOrdinalIgnoreCase(Char)</S>
                        <S>Int32 IndexOf(Char, Int32, Int32)</S>
                        <S>Int32 IndexOfAny(Char[])</S>
                        <S>Int32 IndexOfAny(Char[], Int32)</S>
                        <S>Int32 IndexOfAny(Char[], Int32, Int32)</S>
                        <S>Int32 IndexOf(System.String)</S>
                        <S>Int32 IndexOf(System.String, Int32)</S>
                        <S>Int32 IndexOf(System.String, Int32, Int32)</S>
                        <S>Int32 IndexOf(System.String, System.StringComparison)</S>
                        <S>Int32 IndexOf(System.String, Int32, System.StringComparison)</S>
                        <S>Int32 IndexOf(System.String, Int32, Int32, System.StringComparison)</S>
                        <S>Int32 LastIndexOf(Char)</S>
                        <S>Int32 LastIndexOf(Char, Int32)</S>
                        <S>Int32 LastIndexOf(Char, Int32, Int32)</S>
                        <S>Int32 LastIndexOfAny(Char[])</S>
                        <S>Int32 LastIndexOfAny(Char[], Int32)</S>
                        <S>Int32 LastIndexOfAny(Char[], Int32, Int32)</S>
                        <S>Int32 LastIndexOf(System.String)</S>
                        <S>Int32 LastIndexOf(System.String, Int32)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, Int32)</S>
                        <S>Int32 LastIndexOf(System.String, System.StringComparison)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, System.StringComparison)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, Int32, System.StringComparison)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="11">
                      <TN RefId="10">
                        <T>System.Reflection.TypeInfo+&lt;get_DeclaredNestedTypes&gt;d__22</T>
                        <T>System.Object</T>
                      </TN>
                      <IE>
                        <S>System.String+SearchValuesStorage</S>
                      </IE>
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="12">
                      <TN RefId="11">
                        <T>System.Reflection.PropertyInfo[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST>
                        <S>Char Chars [Int32]</S>
                        <S>Int32 Length</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="13">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.IConvertible</S>
                        <S>System.Collections.Generic.IEnumerable`1[System.Char]</S>
                        <S>System.IComparable`1[System.String]</S>
                        <S>System.IEquatable`1[System.String]</S>
                        <S>System.ICloneable</S>
                        <S>System.ISpanParsable`1[System.String]</S>
                        <S>System.IParsable`1[System.String]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="14">
                      <TN RefId="12">
                        <T>System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Reflection.CustomAttributeData, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                        <T>System.Object</T>
                      </TN>
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.NullableContextAttribute((Byte)1)]</S>
                        <S>[System.Runtime.CompilerServices.NullableAttribute((Byte)0)]</S>
                        <S>[System.Reflection.DefaultMemberAttribute("Chars")]</S>
                        <S>[System.Runtime.Versioning.NonVersionableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="15">
                  <TN RefId="13">
                    <T>System.Collections.ObjectModel.Collection`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                    <T>System.Object</T>
                  </TN>
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AzureADAuthorizationEndpointUri</S>
            <Obj N="Value" RefId="16">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AzureADAuthorizationEndpointUri</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="17">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExchangeEnvironmentName</S>
            <Obj N="Value" RefId="18">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExchangeEnvironmentName</S>
                <Obj N="ParameterType" RefId="19">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment</S>
                    <S N="AssemblyQualifiedName">Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment, Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Exchange.Management.RestApiClient</S>
                    <G N="GUID">80eedfdc-9677-30f6-8ea5-606f7766cb31</G>
                    <B N="IsEnum">true</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">ExchangeEnvironment</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="BaseType">System.Enum</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554445</I32>
                    <S N="Module">Microsoft.Exchange.Management.RestApiClient.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="19" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="20">
                      <TNRef RefId="5" />
                      <LST />
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="21">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int32 value__</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365Default</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365GermanyCloud</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365USGovGCCHigh</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365USGovDoD</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365China</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="22">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int32 value__</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365Default</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365GermanyCloud</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365USGovGCCHigh</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365USGovDoD</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.ExchangeEnvironment O365China</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="23">
                      <TNRef RefId="9" />
                      <LST />
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="24">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="25">
                      <TNRef RefId="11" />
                      <LST />
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="26">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.ISpanFormattable</S>
                        <S>System.IFormattable</S>
                        <S>System.IConvertible</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="27">
                      <TN RefId="14">
                        <T>System.Reflection.CustomAttributeData[]</T>
                        <T>System.Array</T>
                        <T>System.Object</T>
                      </TN>
                      <LST />
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="28">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PSSessionOption</S>
            <Obj N="Value" RefId="29">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PSSessionOption</S>
                <Obj N="ParameterType" RefId="30">
                  <TNRef RefId="3" />
                  <ToString>System.Management.Automation.Remoting.PSSessionOption</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Management.Automation.Remoting.PSSessionOption</S>
                    <S N="AssemblyQualifiedName">System.Management.Automation.Remoting.PSSessionOption, System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">System.Management.Automation.Remoting</S>
                    <G N="GUID">a541a215-2268-3b62-acbb-16058423ba8c</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">PSSessionOption</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <Obj N="BaseType" RefId="31">
                      <S>System.Object</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33555397</I32>
                    <S N="Module">System.Management.Automation.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="30" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="32">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor()</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="33">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int32 &lt;MaximumConnectionRedirectionCount&gt;k__BackingField</S>
                        <S>Boolean &lt;NoCompression&gt;k__BackingField</S>
                        <S>Boolean &lt;NoMachineProfile&gt;k__BackingField</S>
                        <S>System.Management.Automation.Remoting.ProxyAccessType &lt;ProxyAccessType&gt;k__BackingField</S>
                        <S>System.Management.Automation.Runspaces.AuthenticationMechanism _proxyAuthentication</S>
                        <S>System.Management.Automation.PSCredential &lt;ProxyCredential&gt;k__BackingField</S>
                        <S>Boolean &lt;SkipCACheck&gt;k__BackingField</S>
                        <S>Boolean &lt;SkipCNCheck&gt;k__BackingField</S>
                        <S>Boolean &lt;SkipRevocationCheck&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;OperationTimeout&gt;k__BackingField</S>
                        <S>Boolean &lt;NoEncryption&gt;k__BackingField</S>
                        <S>Boolean &lt;UseUTF16&gt;k__BackingField</S>
                        <S>Boolean &lt;IncludePortInSPN&gt;k__BackingField</S>
                        <S>System.Management.Automation.Runspaces.OutputBufferingMode &lt;OutputBufferingMode&gt;k__BackingField</S>
                        <S>Int32 &lt;MaxConnectionRetryCount&gt;k__BackingField</S>
                        <S>System.Globalization.CultureInfo &lt;Culture&gt;k__BackingField</S>
                        <S>System.Globalization.CultureInfo &lt;UICulture&gt;k__BackingField</S>
                        <S>System.Nullable`1[System.Int32] &lt;MaximumReceivedDataSizePerCommand&gt;k__BackingField</S>
                        <S>System.Nullable`1[System.Int32] &lt;MaximumReceivedObjectSize&gt;k__BackingField</S>
                        <S>System.Management.Automation.PSPrimitiveDictionary &lt;ApplicationArguments&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;OpenTimeout&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;CancelTimeout&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;IdleTimeout&gt;k__BackingField</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="34">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int32 get_MaximumConnectionRedirectionCount()</S>
                        <S>Void set_MaximumConnectionRedirectionCount(Int32)</S>
                        <S>Boolean get_NoCompression()</S>
                        <S>Void set_NoCompression(Boolean)</S>
                        <S>Boolean get_NoMachineProfile()</S>
                        <S>Void set_NoMachineProfile(Boolean)</S>
                        <S>System.Management.Automation.Remoting.ProxyAccessType get_ProxyAccessType()</S>
                        <S>Void set_ProxyAccessType(System.Management.Automation.Remoting.ProxyAccessType)</S>
                        <S>System.Management.Automation.Runspaces.AuthenticationMechanism get_ProxyAuthentication()</S>
                        <S>Void set_ProxyAuthentication(System.Management.Automation.Runspaces.AuthenticationMechanism)</S>
                        <S>System.Management.Automation.PSCredential get_ProxyCredential()</S>
                        <S>Void set_ProxyCredential(System.Management.Automation.PSCredential)</S>
                        <S>Boolean get_SkipCACheck()</S>
                        <S>Void set_SkipCACheck(Boolean)</S>
                        <S>Boolean get_SkipCNCheck()</S>
                        <S>Void set_SkipCNCheck(Boolean)</S>
                        <S>Boolean get_SkipRevocationCheck()</S>
                        <S>Void set_SkipRevocationCheck(Boolean)</S>
                        <S>System.TimeSpan get_OperationTimeout()</S>
                        <S>Void set_OperationTimeout(System.TimeSpan)</S>
                        <S>Boolean get_NoEncryption()</S>
                        <S>Void set_NoEncryption(Boolean)</S>
                        <S>Boolean get_UseUTF16()</S>
                        <S>Void set_UseUTF16(Boolean)</S>
                        <S>Boolean get_IncludePortInSPN()</S>
                        <S>Void set_IncludePortInSPN(Boolean)</S>
                        <S>System.Management.Automation.Runspaces.OutputBufferingMode get_OutputBufferingMode()</S>
                        <S>Void set_OutputBufferingMode(System.Management.Automation.Runspaces.OutputBufferingMode)</S>
                        <S>Int32 get_MaxConnectionRetryCount()</S>
                        <S>Void set_MaxConnectionRetryCount(Int32)</S>
                        <S>System.Globalization.CultureInfo get_Culture()</S>
                        <S>Void set_Culture(System.Globalization.CultureInfo)</S>
                        <S>System.Globalization.CultureInfo get_UICulture()</S>
                        <S>Void set_UICulture(System.Globalization.CultureInfo)</S>
                        <S>System.Nullable`1[System.Int32] get_MaximumReceivedDataSizePerCommand()</S>
                        <S>Void set_MaximumReceivedDataSizePerCommand(System.Nullable`1[System.Int32])</S>
                        <S>System.Nullable`1[System.Int32] get_MaximumReceivedObjectSize()</S>
                        <S>Void set_MaximumReceivedObjectSize(System.Nullable`1[System.Int32])</S>
                        <S>System.Management.Automation.PSPrimitiveDictionary get_ApplicationArguments()</S>
                        <S>Void set_ApplicationArguments(System.Management.Automation.PSPrimitiveDictionary)</S>
                        <S>System.TimeSpan get_OpenTimeout()</S>
                        <S>Void set_OpenTimeout(System.TimeSpan)</S>
                        <S>System.TimeSpan get_CancelTimeout()</S>
                        <S>Void set_CancelTimeout(System.TimeSpan)</S>
                        <S>System.TimeSpan get_IdleTimeout()</S>
                        <S>Void set_IdleTimeout(System.TimeSpan)</S>
                        <S>Void .ctor()</S>
                        <S>Int32 MaximumConnectionRedirectionCount</S>
                        <S>Boolean NoCompression</S>
                        <S>Boolean NoMachineProfile</S>
                        <S>System.Management.Automation.Remoting.ProxyAccessType ProxyAccessType</S>
                        <S>System.Management.Automation.Runspaces.AuthenticationMechanism ProxyAuthentication</S>
                        <S>System.Management.Automation.PSCredential ProxyCredential</S>
                        <S>Boolean SkipCACheck</S>
                        <S>Boolean SkipCNCheck</S>
                        <S>Boolean SkipRevocationCheck</S>
                        <S>System.TimeSpan OperationTimeout</S>
                        <S>Boolean NoEncryption</S>
                        <S>Boolean UseUTF16</S>
                        <S>Boolean IncludePortInSPN</S>
                        <S>System.Management.Automation.Runspaces.OutputBufferingMode OutputBufferingMode</S>
                        <S>Int32 MaxConnectionRetryCount</S>
                        <S>System.Globalization.CultureInfo Culture</S>
                        <S>System.Globalization.CultureInfo UICulture</S>
                        <S>System.Nullable`1[System.Int32] MaximumReceivedDataSizePerCommand</S>
                        <S>System.Nullable`1[System.Int32] MaximumReceivedObjectSize</S>
                        <S>System.Management.Automation.PSPrimitiveDictionary ApplicationArguments</S>
                        <S>System.TimeSpan OpenTimeout</S>
                        <S>System.TimeSpan CancelTimeout</S>
                        <S>System.TimeSpan IdleTimeout</S>
                        <S>Int32 &lt;MaximumConnectionRedirectionCount&gt;k__BackingField</S>
                        <S>Boolean &lt;NoCompression&gt;k__BackingField</S>
                        <S>Boolean &lt;NoMachineProfile&gt;k__BackingField</S>
                        <S>System.Management.Automation.Remoting.ProxyAccessType &lt;ProxyAccessType&gt;k__BackingField</S>
                        <S>System.Management.Automation.Runspaces.AuthenticationMechanism _proxyAuthentication</S>
                        <S>System.Management.Automation.PSCredential &lt;ProxyCredential&gt;k__BackingField</S>
                        <S>Boolean &lt;SkipCACheck&gt;k__BackingField</S>
                        <S>Boolean &lt;SkipCNCheck&gt;k__BackingField</S>
                        <S>Boolean &lt;SkipRevocationCheck&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;OperationTimeout&gt;k__BackingField</S>
                        <S>Boolean &lt;NoEncryption&gt;k__BackingField</S>
                        <S>Boolean &lt;UseUTF16&gt;k__BackingField</S>
                        <S>Boolean &lt;IncludePortInSPN&gt;k__BackingField</S>
                        <S>System.Management.Automation.Runspaces.OutputBufferingMode &lt;OutputBufferingMode&gt;k__BackingField</S>
                        <S>Int32 &lt;MaxConnectionRetryCount&gt;k__BackingField</S>
                        <S>System.Globalization.CultureInfo &lt;Culture&gt;k__BackingField</S>
                        <S>System.Globalization.CultureInfo &lt;UICulture&gt;k__BackingField</S>
                        <S>System.Nullable`1[System.Int32] &lt;MaximumReceivedDataSizePerCommand&gt;k__BackingField</S>
                        <S>System.Nullable`1[System.Int32] &lt;MaximumReceivedObjectSize&gt;k__BackingField</S>
                        <S>System.Management.Automation.PSPrimitiveDictionary &lt;ApplicationArguments&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;OpenTimeout&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;CancelTimeout&gt;k__BackingField</S>
                        <S>System.TimeSpan &lt;IdleTimeout&gt;k__BackingField</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="35">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Int32 get_MaximumConnectionRedirectionCount()</S>
                        <S>Void set_MaximumConnectionRedirectionCount(Int32)</S>
                        <S>Boolean get_NoCompression()</S>
                        <S>Void set_NoCompression(Boolean)</S>
                        <S>Boolean get_NoMachineProfile()</S>
                        <S>Void set_NoMachineProfile(Boolean)</S>
                        <S>System.Management.Automation.Remoting.ProxyAccessType get_ProxyAccessType()</S>
                        <S>Void set_ProxyAccessType(System.Management.Automation.Remoting.ProxyAccessType)</S>
                        <S>System.Management.Automation.Runspaces.AuthenticationMechanism get_ProxyAuthentication()</S>
                        <S>Void set_ProxyAuthentication(System.Management.Automation.Runspaces.AuthenticationMechanism)</S>
                        <S>System.Management.Automation.PSCredential get_ProxyCredential()</S>
                        <S>Void set_ProxyCredential(System.Management.Automation.PSCredential)</S>
                        <S>Boolean get_SkipCACheck()</S>
                        <S>Void set_SkipCACheck(Boolean)</S>
                        <S>Boolean get_SkipCNCheck()</S>
                        <S>Void set_SkipCNCheck(Boolean)</S>
                        <S>Boolean get_SkipRevocationCheck()</S>
                        <S>Void set_SkipRevocationCheck(Boolean)</S>
                        <S>System.TimeSpan get_OperationTimeout()</S>
                        <S>Void set_OperationTimeout(System.TimeSpan)</S>
                        <S>Boolean get_NoEncryption()</S>
                        <S>Void set_NoEncryption(Boolean)</S>
                        <S>Boolean get_UseUTF16()</S>
                        <S>Void set_UseUTF16(Boolean)</S>
                        <S>Boolean get_IncludePortInSPN()</S>
                        <S>Void set_IncludePortInSPN(Boolean)</S>
                        <S>System.Management.Automation.Runspaces.OutputBufferingMode get_OutputBufferingMode()</S>
                        <S>Void set_OutputBufferingMode(System.Management.Automation.Runspaces.OutputBufferingMode)</S>
                        <S>Int32 get_MaxConnectionRetryCount()</S>
                        <S>Void set_MaxConnectionRetryCount(Int32)</S>
                        <S>System.Globalization.CultureInfo get_Culture()</S>
                        <S>Void set_Culture(System.Globalization.CultureInfo)</S>
                        <S>System.Globalization.CultureInfo get_UICulture()</S>
                        <S>Void set_UICulture(System.Globalization.CultureInfo)</S>
                        <S>System.Nullable`1[System.Int32] get_MaximumReceivedDataSizePerCommand()</S>
                        <S>Void set_MaximumReceivedDataSizePerCommand(System.Nullable`1[System.Int32])</S>
                        <S>System.Nullable`1[System.Int32] get_MaximumReceivedObjectSize()</S>
                        <S>Void set_MaximumReceivedObjectSize(System.Nullable`1[System.Int32])</S>
                        <S>System.Management.Automation.PSPrimitiveDictionary get_ApplicationArguments()</S>
                        <S>Void set_ApplicationArguments(System.Management.Automation.PSPrimitiveDictionary)</S>
                        <S>System.TimeSpan get_OpenTimeout()</S>
                        <S>Void set_OpenTimeout(System.TimeSpan)</S>
                        <S>System.TimeSpan get_CancelTimeout()</S>
                        <S>Void set_CancelTimeout(System.TimeSpan)</S>
                        <S>System.TimeSpan get_IdleTimeout()</S>
                        <S>Void set_IdleTimeout(System.TimeSpan)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="36">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="37">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Int32 MaximumConnectionRedirectionCount</S>
                        <S>Boolean NoCompression</S>
                        <S>Boolean NoMachineProfile</S>
                        <S>System.Management.Automation.Remoting.ProxyAccessType ProxyAccessType</S>
                        <S>System.Management.Automation.Runspaces.AuthenticationMechanism ProxyAuthentication</S>
                        <S>System.Management.Automation.PSCredential ProxyCredential</S>
                        <S>Boolean SkipCACheck</S>
                        <S>Boolean SkipCNCheck</S>
                        <S>Boolean SkipRevocationCheck</S>
                        <S>System.TimeSpan OperationTimeout</S>
                        <S>Boolean NoEncryption</S>
                        <S>Boolean UseUTF16</S>
                        <S>Boolean IncludePortInSPN</S>
                        <S>System.Management.Automation.Runspaces.OutputBufferingMode OutputBufferingMode</S>
                        <S>Int32 MaxConnectionRetryCount</S>
                        <S>System.Globalization.CultureInfo Culture</S>
                        <S>System.Globalization.CultureInfo UICulture</S>
                        <S>System.Nullable`1[System.Int32] MaximumReceivedDataSizePerCommand</S>
                        <S>System.Nullable`1[System.Int32] MaximumReceivedObjectSize</S>
                        <S>System.Management.Automation.PSPrimitiveDictionary ApplicationArguments</S>
                        <S>System.TimeSpan OpenTimeout</S>
                        <S>System.TimeSpan CancelTimeout</S>
                        <S>System.TimeSpan IdleTimeout</S>
                      </LST>
                    </Obj>
                    <Ref N="ImplementedInterfaces" RefId="5" />
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">false</B>
                    <B N="IsVisible">true</B>
                    <Ref N="CustomAttributes" RefId="27" />
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="38">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BypassMailboxAnchoring</S>
            <Obj N="Value" RefId="39">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BypassMailboxAnchoring</S>
                <Obj N="ParameterType" RefId="40">
                  <TNRef RefId="3" />
                  <ToString>System.Management.Automation.SwitchParameter</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Management.Automation.SwitchParameter</S>
                    <S N="AssemblyQualifiedName">System.Management.Automation.SwitchParameter, System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">System.Management.Automation</S>
                    <G N="GUID">774c58a2-9ed0-326e-8374-68ca1afdf997</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">SwitchParameter</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554819</I32>
                    <S N="Module">System.Management.Automation.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="40" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="41">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Boolean)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="42">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Boolean _isPresent</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="43">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Boolean get_IsPresent()</S>
                        <S>Boolean op_Implicit(System.Management.Automation.SwitchParameter)</S>
                        <S>System.Management.Automation.SwitchParameter op_Implicit(Boolean)</S>
                        <S>Boolean ToBool()</S>
                        <S>System.Management.Automation.SwitchParameter get_Present()</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>Boolean op_Equality(System.Management.Automation.SwitchParameter, System.Management.Automation.SwitchParameter)</S>
                        <S>Boolean op_Inequality(System.Management.Automation.SwitchParameter, System.Management.Automation.SwitchParameter)</S>
                        <S>Boolean op_Equality(System.Management.Automation.SwitchParameter, Boolean)</S>
                        <S>Boolean op_Inequality(System.Management.Automation.SwitchParameter, Boolean)</S>
                        <S>Boolean op_Equality(Boolean, System.Management.Automation.SwitchParameter)</S>
                        <S>Boolean op_Inequality(Boolean, System.Management.Automation.SwitchParameter)</S>
                        <S>System.String ToString()</S>
                        <S>Void .ctor(Boolean)</S>
                        <S>Boolean IsPresent</S>
                        <S>System.Management.Automation.SwitchParameter Present</S>
                        <S>Boolean _isPresent</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="44">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Boolean get_IsPresent()</S>
                        <S>Boolean op_Implicit(System.Management.Automation.SwitchParameter)</S>
                        <S>System.Management.Automation.SwitchParameter op_Implicit(Boolean)</S>
                        <S>Boolean ToBool()</S>
                        <S>System.Management.Automation.SwitchParameter get_Present()</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>Boolean op_Equality(System.Management.Automation.SwitchParameter, System.Management.Automation.SwitchParameter)</S>
                        <S>Boolean op_Inequality(System.Management.Automation.SwitchParameter, System.Management.Automation.SwitchParameter)</S>
                        <S>Boolean op_Equality(System.Management.Automation.SwitchParameter, Boolean)</S>
                        <S>Boolean op_Inequality(System.Management.Automation.SwitchParameter, Boolean)</S>
                        <S>Boolean op_Equality(Boolean, System.Management.Automation.SwitchParameter)</S>
                        <S>Boolean op_Inequality(Boolean, System.Management.Automation.SwitchParameter)</S>
                        <S>System.String ToString()</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="45">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="46">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Boolean IsPresent</S>
                        <S>System.Management.Automation.SwitchParameter Present</S>
                      </LST>
                    </Obj>
                    <Ref N="ImplementedInterfaces" RefId="5" />
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, SequentialLayout, Sealed, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">false</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="47">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.Runtime.CompilerServices.IsReadOnlyAttribute()]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="48">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DelegatedOrganization</S>
            <Obj N="Value" RefId="49">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DelegatedOrganization</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="50">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Prefix</S>
            <Obj N="Value" RefId="51">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Prefix</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="52">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowBanner</S>
            <Obj N="Value" RefId="53">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowBanner</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="54">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CommandName</S>
            <Obj N="Value" RefId="55">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CommandName</S>
                <Obj N="ParameterType" RefId="56">
                  <TNRef RefId="3" />
                  <ToString>System.String[]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.String[]</S>
                    <S N="AssemblyQualifiedName">System.String[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">00000000-0000-0000-0000-000000000000</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">true</B>
                    <B N="ContainsGenericParameters">false</B>
                    <Nil N="StructLayoutAttribute" />
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">String[]</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <Obj N="BaseType" RefId="57">
                      <S>System.Array</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554432</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="56" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="58">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="59">
                      <TNRef RefId="7" />
                      <LST />
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="60">
                      <TNRef RefId="8" />
                      <LST>
                        <S>System.String Get(Int32)</S>
                        <S>Void Set(Int32, System.String)</S>
                        <S>System.String&amp; Address(Int32)</S>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="61">
                      <TNRef RefId="9" />
                      <LST>
                        <S>System.String Get(Int32)</S>
                        <S>Void Set(Int32, System.String)</S>
                        <S>System.String&amp; Address(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="62">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="63">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.ICloneable</S>
                        <S>System.Collections.IList</S>
                        <S>System.Collections.ICollection</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.Collections.IStructuralComparable</S>
                        <S>System.Collections.IStructuralEquatable</S>
                        <S>System.Collections.Generic.IList`1[System.String]</S>
                        <S>System.Collections.Generic.ICollection`1[System.String]</S>
                        <S>System.Collections.Generic.IEnumerable`1[System.String]</S>
                        <S>System.Collections.Generic.IReadOnlyList`1[System.String]</S>
                        <S>System.Collections.Generic.IReadOnlyCollection`1[System.String]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">true</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">true</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, Serializable</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="64">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="65">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FormatTypeName</S>
            <Obj N="Value" RefId="66">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FormatTypeName</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="67">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseRPSSession</S>
            <Obj N="Value" RefId="68">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseRPSSession</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="69">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SkipLoadingFormatData</S>
            <Obj N="Value" RefId="70">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SkipLoadingFormatData</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="71">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SkipLoadingCmdletHelp</S>
            <Obj N="Value" RefId="72">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SkipLoadingCmdletHelp</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="73">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LoadCmdletHelp</S>
            <Obj N="Value" RefId="74">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LoadCmdletHelp</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="75">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AccessToken</S>
            <Obj N="Value" RefId="76">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AccessToken</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="77">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SigningCertificate</S>
            <Obj N="Value" RefId="78">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SigningCertificate</S>
                <Obj N="ParameterType" RefId="79">
                  <TNRef RefId="3" />
                  <ToString>System.Security.Cryptography.X509Certificates.X509Certificate2</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Security.Cryptography.X509Certificates.X509Certificate2</S>
                    <S N="AssemblyQualifiedName">System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</S>
                    <S N="Namespace">System.Security.Cryptography.X509Certificates</S>
                    <G N="GUID">15aed33a-7610-3bb7-bf93-944b3c7ccfe9</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">X509Certificate2</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Security.Cryptography, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</S>
                    <S N="BaseType">System.Security.Cryptography.X509Certificates.X509Certificate</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554925</I32>
                    <S N="Module">System.Security.Cryptography.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="79" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="80">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(Byte[])</S>
                        <S>Void .ctor(Byte[], System.String)</S>
                        <S>Void .ctor(Byte[], System.Security.SecureString)</S>
                        <S>Void .ctor(Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(Byte[], System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte])</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte], System.ReadOnlySpan`1[System.Char], System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(IntPtr)</S>
                        <S>Void .ctor(System.Security.Cryptography.X509Certificates.ICertificatePal)</S>
                        <S>Void .ctor(System.String)</S>
                        <S>Void .ctor(System.String, System.String)</S>
                        <S>Void .ctor(System.String, System.Security.SecureString)</S>
                        <S>Void .ctor(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.String, System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.String, System.ReadOnlySpan`1[System.Char], System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.Security.Cryptography.X509Certificates.X509Certificate)</S>
                        <S>Void .ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>Void .cctor()</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="81">
                      <TNRef RefId="7" />
                      <LST>
                        <S>System.Security.Cryptography.Oid _lazySignatureAlgorithm</S>
                        <S>Int32 _lazyVersion</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName _lazySubjectName</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName _lazyIssuerName</S>
                        <S>System.Security.Cryptography.X509Certificates.PublicKey _lazyPublicKey</S>
                        <S>System.Security.Cryptography.AsymmetricAlgorithm _lazyPrivateKey</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ExtensionCollection _lazyExtensions</S>
                        <S>System.String[] s_EcPublicKeyPrivateKeyLabels</S>
                        <S>System.String[] s_RsaPublicKeyPrivateKeyLabels</S>
                        <S>System.String[] s_DsaPublicKeyPrivateKeyLabels</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="82">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Void Reset()</S>
                        <S>System.Security.Cryptography.X509Certificates.ICertificatePal get_Pal()</S>
                        <S>Boolean get_Archived()</S>
                        <S>Void set_Archived(Boolean)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ExtensionCollection get_Extensions()</S>
                        <S>System.String get_FriendlyName()</S>
                        <S>Void set_FriendlyName(System.String)</S>
                        <S>Boolean get_HasPrivateKey()</S>
                        <S>System.Security.Cryptography.AsymmetricAlgorithm get_PrivateKey()</S>
                        <S>Void set_PrivateKey(System.Security.Cryptography.AsymmetricAlgorithm)</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName get_IssuerName()</S>
                        <S>System.DateTime get_NotAfter()</S>
                        <S>System.DateTime get_NotBefore()</S>
                        <S>System.Security.Cryptography.X509Certificates.PublicKey get_PublicKey()</S>
                        <S>Byte[] get_RawData()</S>
                        <S>System.ReadOnlyMemory`1[System.Byte] get_RawDataMemory()</S>
                        <S>System.String get_SerialNumber()</S>
                        <S>System.Security.Cryptography.Oid get_SignatureAlgorithm()</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName get_SubjectName()</S>
                        <S>System.String get_Thumbprint()</S>
                        <S>Int32 get_Version()</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(Byte[])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(System.ReadOnlySpan`1[System.Byte])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(System.String)</S>
                        <S>System.String GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType, Boolean)</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(Boolean)</S>
                        <S>Void Import(Byte[])</S>
                        <S>Void Import(Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void Import(Byte[], System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void Import(System.String)</S>
                        <S>Void Import(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void Import(System.String, System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Boolean Verify()</S>
                        <S>System.Security.Cryptography.ECDiffieHellman GetECDiffieHellmanPublicKey()</S>
                        <S>System.Security.Cryptography.ECDiffieHellman GetECDiffieHellmanPrivateKey()</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CopyWithPrivateKey(System.Security.Cryptography.ECDiffieHellman)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromPemFile(System.String, System.String)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromEncryptedPemFile(System.String, System.ReadOnlySpan`1[System.Char], System.String)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromPem(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromEncryptedPem(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean IsECDsa(System.Security.Cryptography.X509Certificates.X509Certificate2)</S>
                        <S>Boolean IsECDiffieHellman(System.Security.Cryptography.X509Certificates.X509Certificate2)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromPem(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String ExportCertificatePem()</S>
                        <S>Boolean TryExportCertificatePem(System.Span`1[System.Char], Int32 ByRef)</S>
                        <S>Boolean MatchesHostname(System.String, Boolean, Boolean)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 ExtractKeyFromPem[TAlg](System.ReadOnlySpan`1[System.Char], System.String[], System.Func`1[TAlg], System.Func`2[TAlg,System.Security.Cryptography.X509Certificates.X509Certificate2])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 ExtractKeyFromEncryptedPem[TAlg](System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Func`1[TAlg], System.Func`2[TAlg,System.Security.Cryptography.X509Certificates.X509Certificate2])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Extension CreateCustomExtensionIfAny(System.Security.Cryptography.Oid)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Extension CreateCustomExtensionIfAny(System.String)</S>
                        <S>Boolean HasECDiffieHellmanKeyUsage(System.Security.Cryptography.X509Certificates.X509Certificate2)</S>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(Byte[])</S>
                        <S>Void .ctor(Byte[], System.String)</S>
                        <S>Void .ctor(Byte[], System.Security.SecureString)</S>
                        <S>Void .ctor(Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(Byte[], System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte])</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte], System.ReadOnlySpan`1[System.Char], System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(IntPtr)</S>
                        <S>Void .ctor(System.Security.Cryptography.X509Certificates.ICertificatePal)</S>
                        <S>Void .ctor(System.String)</S>
                        <S>Void .ctor(System.String, System.String)</S>
                        <S>Void .ctor(System.String, System.Security.SecureString)</S>
                        <S>Void .ctor(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.String, System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.String, System.ReadOnlySpan`1[System.Char], System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void .ctor(System.Security.Cryptography.X509Certificates.X509Certificate)</S>
                        <S>Void .ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>Void .cctor()</S>
                        <S>System.Security.Cryptography.X509Certificates.ICertificatePal Pal</S>
                        <S>Boolean Archived</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions</S>
                        <S>System.String FriendlyName</S>
                        <S>Boolean HasPrivateKey</S>
                        <S>System.Security.Cryptography.AsymmetricAlgorithm PrivateKey</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName</S>
                        <S>System.DateTime NotAfter</S>
                        <S>System.DateTime NotBefore</S>
                        <S>System.Security.Cryptography.X509Certificates.PublicKey PublicKey</S>
                        <S>Byte[] RawData</S>
                        <S>System.ReadOnlyMemory`1[System.Byte] RawDataMemory</S>
                        <S>System.String SerialNumber</S>
                        <S>System.Security.Cryptography.Oid SignatureAlgorithm</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName</S>
                        <S>System.String Thumbprint</S>
                        <S>Int32 Version</S>
                        <S>System.Security.Cryptography.Oid _lazySignatureAlgorithm</S>
                        <S>Int32 _lazyVersion</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName _lazySubjectName</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName _lazyIssuerName</S>
                        <S>System.Security.Cryptography.X509Certificates.PublicKey _lazyPublicKey</S>
                        <S>System.Security.Cryptography.AsymmetricAlgorithm _lazyPrivateKey</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ExtensionCollection _lazyExtensions</S>
                        <S>System.String[] s_EcPublicKeyPrivateKeyLabels</S>
                        <S>System.String[] s_RsaPublicKeyPrivateKeyLabels</S>
                        <S>System.String[] s_DsaPublicKeyPrivateKeyLabels</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2+&lt;&gt;O</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="83">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Void Reset()</S>
                        <S>System.Security.Cryptography.X509Certificates.ICertificatePal get_Pal()</S>
                        <S>Boolean get_Archived()</S>
                        <S>Void set_Archived(Boolean)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ExtensionCollection get_Extensions()</S>
                        <S>System.String get_FriendlyName()</S>
                        <S>Void set_FriendlyName(System.String)</S>
                        <S>Boolean get_HasPrivateKey()</S>
                        <S>System.Security.Cryptography.AsymmetricAlgorithm get_PrivateKey()</S>
                        <S>Void set_PrivateKey(System.Security.Cryptography.AsymmetricAlgorithm)</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName get_IssuerName()</S>
                        <S>System.DateTime get_NotAfter()</S>
                        <S>System.DateTime get_NotBefore()</S>
                        <S>System.Security.Cryptography.X509Certificates.PublicKey get_PublicKey()</S>
                        <S>Byte[] get_RawData()</S>
                        <S>System.ReadOnlyMemory`1[System.Byte] get_RawDataMemory()</S>
                        <S>System.String get_SerialNumber()</S>
                        <S>System.Security.Cryptography.Oid get_SignatureAlgorithm()</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName get_SubjectName()</S>
                        <S>System.String get_Thumbprint()</S>
                        <S>Int32 get_Version()</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(Byte[])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(System.ReadOnlySpan`1[System.Byte])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(System.String)</S>
                        <S>System.String GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType, Boolean)</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(Boolean)</S>
                        <S>Void Import(Byte[])</S>
                        <S>Void Import(Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void Import(Byte[], System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void Import(System.String)</S>
                        <S>Void Import(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Void Import(System.String, System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)</S>
                        <S>Boolean Verify()</S>
                        <S>System.Security.Cryptography.ECDiffieHellman GetECDiffieHellmanPublicKey()</S>
                        <S>System.Security.Cryptography.ECDiffieHellman GetECDiffieHellmanPrivateKey()</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CopyWithPrivateKey(System.Security.Cryptography.ECDiffieHellman)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromPemFile(System.String, System.String)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromEncryptedPemFile(System.String, System.ReadOnlySpan`1[System.Char], System.String)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromPem(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromEncryptedPem(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean IsECDsa(System.Security.Cryptography.X509Certificates.X509Certificate2)</S>
                        <S>Boolean IsECDiffieHellman(System.Security.Cryptography.X509Certificates.X509Certificate2)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 CreateFromPem(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.String ExportCertificatePem()</S>
                        <S>Boolean TryExportCertificatePem(System.Span`1[System.Char], Int32 ByRef)</S>
                        <S>Boolean MatchesHostname(System.String, Boolean, Boolean)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 ExtractKeyFromPem[TAlg](System.ReadOnlySpan`1[System.Char], System.String[], System.Func`1[TAlg], System.Func`2[TAlg,System.Security.Cryptography.X509Certificates.X509Certificate2])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2 ExtractKeyFromEncryptedPem[TAlg](System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Func`1[TAlg], System.Func`2[TAlg,System.Security.Cryptography.X509Certificates.X509Certificate2])</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Extension CreateCustomExtensionIfAny(System.Security.Cryptography.Oid)</S>
                        <S>System.Security.Cryptography.X509Certificates.X509Extension CreateCustomExtensionIfAny(System.String)</S>
                        <S>Boolean HasECDiffieHellmanKeyUsage(System.Security.Cryptography.X509Certificates.X509Certificate2)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="84">
                      <TNRef RefId="10" />
                      <IE>
                        <S>System.Security.Cryptography.X509Certificates.X509Certificate2+&lt;&gt;O</S>
                      </IE>
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="85">
                      <TNRef RefId="11" />
                      <LST>
                        <S>System.Security.Cryptography.X509Certificates.ICertificatePal Pal</S>
                        <S>Boolean Archived</S>
                        <S>System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions</S>
                        <S>System.String FriendlyName</S>
                        <S>Boolean HasPrivateKey</S>
                        <S>System.Security.Cryptography.AsymmetricAlgorithm PrivateKey</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName</S>
                        <S>System.DateTime NotAfter</S>
                        <S>System.DateTime NotBefore</S>
                        <S>System.Security.Cryptography.X509Certificates.PublicKey PublicKey</S>
                        <S>Byte[] RawData</S>
                        <S>System.ReadOnlyMemory`1[System.Byte] RawDataMemory</S>
                        <S>System.String SerialNumber</S>
                        <S>System.Security.Cryptography.Oid SignatureAlgorithm</S>
                        <S>System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName</S>
                        <S>System.String Thumbprint</S>
                        <S>Int32 Version</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="86">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IDisposable</S>
                        <S>System.Runtime.Serialization.IDeserializationCallback</S>
                        <S>System.Runtime.Serialization.ISerializable</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">false</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <S N="TypeInitializer">Void .cctor()</S>
                    <B N="IsSerializable">false</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="87">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.Runtime.CompilerServices.NullableContextAttribute((Byte)1)]</S>
                        <S>[System.Runtime.CompilerServices.NullableAttribute((Byte)0)]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="88">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DisableWAM</S>
            <Obj N="Value" RefId="89">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DisableWAM</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="90">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="91">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="92">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="93">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="94">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="95">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Obj N="ParameterType" RefId="96">
                  <TNRef RefId="3" />
                  <ToString>System.Management.Automation.ActionPreference</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Management.Automation.ActionPreference</S>
                    <S N="AssemblyQualifiedName">System.Management.Automation.ActionPreference, System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">System.Management.Automation</S>
                    <G N="GUID">73fddb39-68b2-3316-9fa3-a88a0d441a02</G>
                    <B N="IsEnum">true</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">ActionPreference</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="BaseType">System.Enum</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554582</I32>
                    <S N="Module">System.Management.Automation.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="96" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Ref N="DeclaredConstructors" RefId="20" />
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="97">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int32 value__</S>
                        <S>System.Management.Automation.ActionPreference SilentlyContinue</S>
                        <S>System.Management.Automation.ActionPreference Stop</S>
                        <S>System.Management.Automation.ActionPreference Continue</S>
                        <S>System.Management.Automation.ActionPreference Inquire</S>
                        <S>System.Management.Automation.ActionPreference Ignore</S>
                        <S>System.Management.Automation.ActionPreference Suspend</S>
                        <S>System.Management.Automation.ActionPreference Break</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="98">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int32 value__</S>
                        <S>System.Management.Automation.ActionPreference SilentlyContinue</S>
                        <S>System.Management.Automation.ActionPreference Stop</S>
                        <S>System.Management.Automation.ActionPreference Continue</S>
                        <S>System.Management.Automation.ActionPreference Inquire</S>
                        <S>System.Management.Automation.ActionPreference Ignore</S>
                        <S>System.Management.Automation.ActionPreference Suspend</S>
                        <S>System.Management.Automation.ActionPreference Break</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredMethods" RefId="23" />
                    <Obj N="DeclaredNestedTypes" RefId="99">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="100">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.ISpanFormattable</S>
                        <S>System.IFormattable</S>
                        <S>System.IConvertible</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Ref N="CustomAttributes" RefId="27" />
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="101">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="102">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="103">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="104">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="105">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="106">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="107">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="108">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="109">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="110">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="111">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="112">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="113">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="114">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="115">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="116">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Obj N="ParameterType" RefId="117">
                  <TNRef RefId="3" />
                  <ToString>System.Int32</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Int32</S>
                    <S N="AssemblyQualifiedName">System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">ac33e7bc-587c-33d5-89a4-218626424743</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">Int32</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554784</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="117" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Ref N="DeclaredConstructors" RefId="20" />
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="118">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int32 m_value</S>
                        <S>Int32 MaxValue</S>
                        <S>Int32 MinValue</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="119">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int64 BigMul(Int32, Int32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(Int32)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(Int32)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.String)</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Int32 Parse(System.String)</S>
                        <S>Int32 Parse(System.String, System.Globalization.NumberStyles)</S>
                        <S>Int32 Parse(System.String, System.IFormatProvider)</S>
                        <S>Int32 Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.String, Int32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], Int32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], Int32 ByRef)</S>
                        <S>Boolean TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, Int32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider, Int32 ByRef)</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>Int32 System.Numerics.IAdditionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Addition(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IAdditionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_CheckedAddition(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IAdditiveIdentity&lt;System.Int32,System.Int32&gt;.get_AdditiveIdentity()</S>
                        <S>System.ValueTuple`2[System.Int32,System.Int32] DivRem(Int32, Int32)</S>
                        <S>Int32 LeadingZeroCount(Int32)</S>
                        <S>Int32 PopCount(Int32)</S>
                        <S>Int32 RotateLeft(Int32, Int32)</S>
                        <S>Int32 RotateRight(Int32, Int32)</S>
                        <S>Int32 TrailingZeroCount(Int32)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryReadBigEndian(System.ReadOnlySpan`1[System.Byte], Boolean, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryReadLittleEndian(System.ReadOnlySpan`1[System.Byte], Boolean, Int32 ByRef)</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.Int32&gt;.GetShortestBitLength()</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.Int32&gt;.GetByteCount()</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryWriteBigEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryWriteLittleEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>Int32 System.Numerics.IBinaryNumber&lt;System.Int32&gt;.get_AllBitsSet()</S>
                        <S>Boolean IsPow2(Int32)</S>
                        <S>Int32 Log2(Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_BitwiseAnd(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_BitwiseOr(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_ExclusiveOr(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_OnesComplement(Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_LessThan(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_LessThanOrEqual(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_GreaterThan(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_GreaterThanOrEqual(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IDecrementOperators&lt;System.Int32&gt;.op_Decrement(Int32)</S>
                        <S>Int32 System.Numerics.IDecrementOperators&lt;System.Int32&gt;.op_CheckedDecrement(Int32)</S>
                        <S>Int32 System.Numerics.IDivisionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Division(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_Equality(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_Inequality(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IIncrementOperators&lt;System.Int32&gt;.op_Increment(Int32)</S>
                        <S>Int32 System.Numerics.IIncrementOperators&lt;System.Int32&gt;.op_CheckedIncrement(Int32)</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.get_MinValue()</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.get_MaxValue()</S>
                        <S>Int32 System.Numerics.IModulusOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Modulus(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IMultiplicativeIdentity&lt;System.Int32,System.Int32&gt;.get_MultiplicativeIdentity()</S>
                        <S>Int32 System.Numerics.IMultiplyOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Multiply(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IMultiplyOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_CheckedMultiply(Int32, Int32)</S>
                        <S>Int32 Clamp(Int32, Int32, Int32)</S>
                        <S>Int32 CopySign(Int32, Int32)</S>
                        <S>Int32 Max(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumber&lt;System.Int32&gt;.MaxNumber(Int32, Int32)</S>
                        <S>Int32 Min(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumber&lt;System.Int32&gt;.MinNumber(Int32, Int32)</S>
                        <S>Int32 Sign(Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.get_One()</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.get_Radix()</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.get_Zero()</S>
                        <S>Int32 Abs(Int32)</S>
                        <S>Int32 CreateChecked[TOther](TOther)</S>
                        <S>Int32 CreateSaturating[TOther](TOther)</S>
                        <S>Int32 CreateTruncating[TOther](TOther)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsCanonical(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsComplexNumber(Int32)</S>
                        <S>Boolean IsEvenInteger(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsFinite(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsImaginaryNumber(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsInfinity(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsInteger(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsNaN(Int32)</S>
                        <S>Boolean IsNegative(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsNegativeInfinity(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsNormal(Int32)</S>
                        <S>Boolean IsOddInteger(Int32)</S>
                        <S>Boolean IsPositive(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsPositiveInfinity(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsRealNumber(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsSubnormal(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsZero(Int32)</S>
                        <S>Int32 MaxMagnitude(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.MaxMagnitudeNumber(Int32, Int32)</S>
                        <S>Int32 MinMagnitude(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.MinMagnitudeNumber(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.MultiplyAddEstimate(Int32, Int32, Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertFromChecked[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean TryConvertFromChecked[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertFromSaturating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean TryConvertFromSaturating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertFromTruncating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean TryConvertFromTruncating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked[TOther](Int32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating[TOther](Int32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating[TOther](Int32, TOther ByRef)</S>
                        <S>Boolean TryParse(System.String, System.IFormatProvider, Int32 ByRef)</S>
                        <S>Int32 System.Numerics.IShiftOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_LeftShift(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IShiftOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_RightShift(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IShiftOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_UnsignedRightShift(Int32, Int32)</S>
                        <S>Int32 System.Numerics.ISignedNumber&lt;System.Int32&gt;.get_NegativeOne()</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, Int32 ByRef)</S>
                        <S>Int32 System.Numerics.ISubtractionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Subtraction(Int32, Int32)</S>
                        <S>Int32 System.Numerics.ISubtractionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_CheckedSubtraction(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IUnaryNegationOperators&lt;System.Int32,System.Int32&gt;.op_UnaryNegation(Int32)</S>
                        <S>Int32 System.Numerics.IUnaryNegationOperators&lt;System.Int32,System.Int32&gt;.op_CheckedUnaryNegation(Int32)</S>
                        <S>Int32 System.Numerics.IUnaryPlusOperators&lt;System.Int32,System.Int32&gt;.op_UnaryPlus(Int32)</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider, Int32 ByRef)</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider, Int32 ByRef)</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_IsSigned()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_MaxDigitCount()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_MaxHexDigitCount()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_MaxValueDiv10()</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_OverflowMessage()</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.IsGreaterThanAsUnsigned(Int32, Int32)</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MultiplyBy10(Int32)</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MultiplyBy16(Int32)</S>
                        <S>Int32 System.Numerics.IAdditiveIdentity&lt;System.Int32,System.Int32&gt;.AdditiveIdentity</S>
                        <S>Int32 System.Numerics.IBinaryNumber&lt;System.Int32&gt;.AllBitsSet</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.MinValue</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.MaxValue</S>
                        <S>Int32 System.Numerics.IMultiplicativeIdentity&lt;System.Int32,System.Int32&gt;.MultiplicativeIdentity</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.One</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.Radix</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.Zero</S>
                        <S>Int32 System.Numerics.ISignedNumber&lt;System.Int32&gt;.NegativeOne</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.IsSigned</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MaxDigitCount</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MaxHexDigitCount</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MaxValueDiv10</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.OverflowMessage</S>
                        <S>Int32 m_value</S>
                        <S>Int32 MaxValue</S>
                        <S>Int32 MinValue</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="120">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Int64 BigMul(Int32, Int32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(Int32)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(Int32)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.String)</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Int32 Parse(System.String)</S>
                        <S>Int32 Parse(System.String, System.Globalization.NumberStyles)</S>
                        <S>Int32 Parse(System.String, System.IFormatProvider)</S>
                        <S>Int32 Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.String, Int32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], Int32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], Int32 ByRef)</S>
                        <S>Boolean TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, Int32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider, Int32 ByRef)</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>Int32 System.Numerics.IAdditionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Addition(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IAdditionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_CheckedAddition(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IAdditiveIdentity&lt;System.Int32,System.Int32&gt;.get_AdditiveIdentity()</S>
                        <S>System.ValueTuple`2[System.Int32,System.Int32] DivRem(Int32, Int32)</S>
                        <S>Int32 LeadingZeroCount(Int32)</S>
                        <S>Int32 PopCount(Int32)</S>
                        <S>Int32 RotateLeft(Int32, Int32)</S>
                        <S>Int32 RotateRight(Int32, Int32)</S>
                        <S>Int32 TrailingZeroCount(Int32)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryReadBigEndian(System.ReadOnlySpan`1[System.Byte], Boolean, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryReadLittleEndian(System.ReadOnlySpan`1[System.Byte], Boolean, Int32 ByRef)</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.Int32&gt;.GetShortestBitLength()</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.Int32&gt;.GetByteCount()</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryWriteBigEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.Int32&gt;.TryWriteLittleEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>Int32 System.Numerics.IBinaryNumber&lt;System.Int32&gt;.get_AllBitsSet()</S>
                        <S>Boolean IsPow2(Int32)</S>
                        <S>Int32 Log2(Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_BitwiseAnd(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_BitwiseOr(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_ExclusiveOr(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IBitwiseOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_OnesComplement(Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_LessThan(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_LessThanOrEqual(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_GreaterThan(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_GreaterThanOrEqual(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IDecrementOperators&lt;System.Int32&gt;.op_Decrement(Int32)</S>
                        <S>Int32 System.Numerics.IDecrementOperators&lt;System.Int32&gt;.op_CheckedDecrement(Int32)</S>
                        <S>Int32 System.Numerics.IDivisionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Division(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_Equality(Int32, Int32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.Int32,System.Int32,System.Boolean&gt;.op_Inequality(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IIncrementOperators&lt;System.Int32&gt;.op_Increment(Int32)</S>
                        <S>Int32 System.Numerics.IIncrementOperators&lt;System.Int32&gt;.op_CheckedIncrement(Int32)</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.get_MinValue()</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.get_MaxValue()</S>
                        <S>Int32 System.Numerics.IModulusOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Modulus(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IMultiplicativeIdentity&lt;System.Int32,System.Int32&gt;.get_MultiplicativeIdentity()</S>
                        <S>Int32 System.Numerics.IMultiplyOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Multiply(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IMultiplyOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_CheckedMultiply(Int32, Int32)</S>
                        <S>Int32 Clamp(Int32, Int32, Int32)</S>
                        <S>Int32 CopySign(Int32, Int32)</S>
                        <S>Int32 Max(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumber&lt;System.Int32&gt;.MaxNumber(Int32, Int32)</S>
                        <S>Int32 Min(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumber&lt;System.Int32&gt;.MinNumber(Int32, Int32)</S>
                        <S>Int32 Sign(Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.get_One()</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.get_Radix()</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.get_Zero()</S>
                        <S>Int32 Abs(Int32)</S>
                        <S>Int32 CreateChecked[TOther](TOther)</S>
                        <S>Int32 CreateSaturating[TOther](TOther)</S>
                        <S>Int32 CreateTruncating[TOther](TOther)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsCanonical(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsComplexNumber(Int32)</S>
                        <S>Boolean IsEvenInteger(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsFinite(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsImaginaryNumber(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsInfinity(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsInteger(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsNaN(Int32)</S>
                        <S>Boolean IsNegative(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsNegativeInfinity(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsNormal(Int32)</S>
                        <S>Boolean IsOddInteger(Int32)</S>
                        <S>Boolean IsPositive(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsPositiveInfinity(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsRealNumber(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsSubnormal(Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.IsZero(Int32)</S>
                        <S>Int32 MaxMagnitude(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.MaxMagnitudeNumber(Int32, Int32)</S>
                        <S>Int32 MinMagnitude(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.MinMagnitudeNumber(Int32, Int32)</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.MultiplyAddEstimate(Int32, Int32, Int32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertFromChecked[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean TryConvertFromChecked[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertFromSaturating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean TryConvertFromSaturating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertFromTruncating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean TryConvertFromTruncating[TOther](TOther, Int32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToChecked[TOther](Int32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToSaturating[TOther](Int32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.Int32&gt;.TryConvertToTruncating[TOther](Int32, TOther ByRef)</S>
                        <S>Boolean TryParse(System.String, System.IFormatProvider, Int32 ByRef)</S>
                        <S>Int32 System.Numerics.IShiftOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_LeftShift(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IShiftOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_RightShift(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IShiftOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_UnsignedRightShift(Int32, Int32)</S>
                        <S>Int32 System.Numerics.ISignedNumber&lt;System.Int32&gt;.get_NegativeOne()</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, Int32 ByRef)</S>
                        <S>Int32 System.Numerics.ISubtractionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_Subtraction(Int32, Int32)</S>
                        <S>Int32 System.Numerics.ISubtractionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_CheckedSubtraction(Int32, Int32)</S>
                        <S>Int32 System.Numerics.IUnaryNegationOperators&lt;System.Int32,System.Int32&gt;.op_UnaryNegation(Int32)</S>
                        <S>Int32 System.Numerics.IUnaryNegationOperators&lt;System.Int32,System.Int32&gt;.op_CheckedUnaryNegation(Int32)</S>
                        <S>Int32 System.Numerics.IUnaryPlusOperators&lt;System.Int32,System.Int32&gt;.op_UnaryPlus(Int32)</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider, Int32 ByRef)</S>
                        <S>Int32 Parse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider, Int32 ByRef)</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_IsSigned()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_MaxDigitCount()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_MaxHexDigitCount()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_MaxValueDiv10()</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.get_OverflowMessage()</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.IsGreaterThanAsUnsigned(Int32, Int32)</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MultiplyBy10(Int32)</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MultiplyBy16(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="121">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="122">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Int32 System.Numerics.IAdditiveIdentity&lt;System.Int32,System.Int32&gt;.AdditiveIdentity</S>
                        <S>Int32 System.Numerics.IBinaryNumber&lt;System.Int32&gt;.AllBitsSet</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.MinValue</S>
                        <S>Int32 System.Numerics.IMinMaxValue&lt;System.Int32&gt;.MaxValue</S>
                        <S>Int32 System.Numerics.IMultiplicativeIdentity&lt;System.Int32,System.Int32&gt;.MultiplicativeIdentity</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.One</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.Radix</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.Int32&gt;.Zero</S>
                        <S>Int32 System.Numerics.ISignedNumber&lt;System.Int32&gt;.NegativeOne</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.IsSigned</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MaxDigitCount</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MaxHexDigitCount</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.MaxValueDiv10</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.Int32&gt;.OverflowMessage</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="123">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.IConvertible</S>
                        <S>System.ISpanFormattable</S>
                        <S>System.IFormattable</S>
                        <S>System.IComparable`1[System.Int32]</S>
                        <S>System.IEquatable`1[System.Int32]</S>
                        <S>System.Numerics.IBinaryInteger`1[System.Int32]</S>
                        <S>System.Numerics.IBinaryNumber`1[System.Int32]</S>
                        <S>System.Numerics.IBitwiseOperators`3[System.Int32,System.Int32,System.Int32]</S>
                        <S>System.Numerics.INumber`1[System.Int32]</S>
                        <S>System.Numerics.IComparisonOperators`3[System.Int32,System.Int32,System.Boolean]</S>
                        <S>System.Numerics.IEqualityOperators`3[System.Int32,System.Int32,System.Boolean]</S>
                        <S>System.Numerics.IModulusOperators`3[System.Int32,System.Int32,System.Int32]</S>
                        <S>System.Numerics.INumberBase`1[System.Int32]</S>
                        <S>System.Numerics.IAdditionOperators`3[System.Int32,System.Int32,System.Int32]</S>
                        <S>System.Numerics.IAdditiveIdentity`2[System.Int32,System.Int32]</S>
                        <S>System.Numerics.IDecrementOperators`1[System.Int32]</S>
                        <S>System.Numerics.IDivisionOperators`3[System.Int32,System.Int32,System.Int32]</S>
                        <S>System.Numerics.IIncrementOperators`1[System.Int32]</S>
                        <S>System.Numerics.IMultiplicativeIdentity`2[System.Int32,System.Int32]</S>
                        <S>System.Numerics.IMultiplyOperators`3[System.Int32,System.Int32,System.Int32]</S>
                        <S>System.ISpanParsable`1[System.Int32]</S>
                        <S>System.IParsable`1[System.Int32]</S>
                        <S>System.Numerics.ISubtractionOperators`3[System.Int32,System.Int32,System.Int32]</S>
                        <S>System.Numerics.IUnaryPlusOperators`2[System.Int32,System.Int32]</S>
                        <S>System.Numerics.IUnaryNegationOperators`2[System.Int32,System.Int32]</S>
                        <S>System.IUtf8SpanFormattable</S>
                        <S>System.IUtf8SpanParsable`1[System.Int32]</S>
                        <S>System.Numerics.IShiftOperators`3[System.Int32,System.Int32,System.Int32]</S>
                        <S>System.Numerics.IMinMaxValue`1[System.Int32]</S>
                        <S>System.Numerics.ISignedNumber`1[System.Int32]</S>
                        <S>System.IBinaryIntegerParseAndFormatInfo`1[System.Int32]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">true</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="124">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.IsReadOnlyAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="125">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="126">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="127">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="128">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="129">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Credential</S>
            <Obj N="Value" RefId="130">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Credential</S>
                <Obj N="ParameterType" RefId="131">
                  <TNRef RefId="3" />
                  <ToString>System.Management.Automation.PSCredential</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Management.Automation.PSCredential</S>
                    <S N="AssemblyQualifiedName">System.Management.Automation.PSCredential, System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">System.Management.Automation</S>
                    <G N="GUID">27037e5b-adbb-3164-b779-832f74f72e4b</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">PSCredential</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <Obj N="BaseType" RefId="132">
                      <S>System.Object</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554651</I32>
                    <S N="Module">System.Management.Automation.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="131" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="133">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>Void .ctor(System.String, System.Security.SecureString)</S>
                        <S>Void .ctor(System.Management.Automation.PSObject)</S>
                        <S>Void .ctor()</S>
                        <S>Void .cctor()</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="134">
                      <TNRef RefId="7" />
                      <LST>
                        <S>System.String _userName</S>
                        <S>System.Security.SecureString _password</S>
                        <S>System.Net.NetworkCredential _netCred</S>
                        <S>System.Management.Automation.GetSymmetricEncryptionKey s_delegate</S>
                        <S>System.Management.Automation.PSCredential s_empty</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="135">
                      <TNRef RefId="8" />
                      <LST>
                        <S>System.Management.Automation.GetSymmetricEncryptionKey get_GetSymmetricEncryptionKeyDelegate()</S>
                        <S>Void set_GetSymmetricEncryptionKeyDelegate(System.Management.Automation.GetSymmetricEncryptionKey)</S>
                        <S>Void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>System.String get_UserName()</S>
                        <S>System.Security.SecureString get_Password()</S>
                        <S>System.Net.NetworkCredential GetNetworkCredential()</S>
                        <S>System.Net.NetworkCredential op_Explicit(System.Management.Automation.PSCredential)</S>
                        <S>System.Management.Automation.PSCredential get_Empty()</S>
                        <S>Boolean IsValidUserName(System.String, System.String ByRef, System.String ByRef)</S>
                        <S>Void SplitUserDomain(System.String, System.String ByRef, System.String ByRef)</S>
                        <S>Void .ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>Void .ctor(System.String, System.Security.SecureString)</S>
                        <S>Void .ctor(System.Management.Automation.PSObject)</S>
                        <S>Void .ctor()</S>
                        <S>Void .cctor()</S>
                        <S>System.Management.Automation.GetSymmetricEncryptionKey GetSymmetricEncryptionKeyDelegate</S>
                        <S>System.String UserName</S>
                        <S>System.Security.SecureString Password</S>
                        <S>System.Management.Automation.PSCredential Empty</S>
                        <S>System.String _userName</S>
                        <S>System.Security.SecureString _password</S>
                        <S>System.Net.NetworkCredential _netCred</S>
                        <S>System.Management.Automation.GetSymmetricEncryptionKey s_delegate</S>
                        <S>System.Management.Automation.PSCredential s_empty</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="136">
                      <TNRef RefId="9" />
                      <LST>
                        <S>System.Management.Automation.GetSymmetricEncryptionKey get_GetSymmetricEncryptionKeyDelegate()</S>
                        <S>Void set_GetSymmetricEncryptionKeyDelegate(System.Management.Automation.GetSymmetricEncryptionKey)</S>
                        <S>Void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>System.String get_UserName()</S>
                        <S>System.Security.SecureString get_Password()</S>
                        <S>System.Net.NetworkCredential GetNetworkCredential()</S>
                        <S>System.Net.NetworkCredential op_Explicit(System.Management.Automation.PSCredential)</S>
                        <S>System.Management.Automation.PSCredential get_Empty()</S>
                        <S>Boolean IsValidUserName(System.String, System.String ByRef, System.String ByRef)</S>
                        <S>Void SplitUserDomain(System.String, System.String ByRef, System.String ByRef)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="137">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="138">
                      <TNRef RefId="11" />
                      <LST>
                        <S>System.Management.Automation.GetSymmetricEncryptionKey GetSymmetricEncryptionKeyDelegate</S>
                        <S>System.String UserName</S>
                        <S>System.Security.SecureString Password</S>
                        <S>System.Management.Automation.PSCredential Empty</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="139">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.Runtime.Serialization.ISerializable</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <S N="TypeInitializer">Void .cctor()</S>
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="140">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="141">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Certificate</S>
            <Obj N="Value" RefId="142">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Certificate</S>
                <Ref N="ParameterType" RefId="79" />
                <Obj N="Aliases" RefId="143">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CertificateFilePath</S>
            <Obj N="Value" RefId="144">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CertificateFilePath</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="145">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CertificatePassword</S>
            <Obj N="Value" RefId="146">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CertificatePassword</S>
                <Obj N="ParameterType" RefId="147">
                  <TNRef RefId="3" />
                  <ToString>System.Security.SecureString</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Security.SecureString</S>
                    <S N="AssemblyQualifiedName">System.Security.SecureString, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System.Security</S>
                    <G N="GUID">d6f81f90-b952-3a84-9094-ddefd4e0cd82</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">SecureString</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <Obj N="BaseType" RefId="148">
                      <S>System.Object</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554979</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="147" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="149">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(Char*, Int32)</S>
                        <S>Void .ctor(System.Security.SecureString)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="150">
                      <TNRef RefId="7" />
                      <LST>
                        <S>System.Object _methodLock</S>
                        <S>UnmanagedBuffer _buffer</S>
                        <S>Int32 _decryptedLength</S>
                        <S>Boolean _encrypted</S>
                        <S>Boolean _readOnly</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="151">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Void Initialize(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 get_Length()</S>
                        <S>Void EnsureCapacity(Int32)</S>
                        <S>Void AppendChar(Char)</S>
                        <S>Void Clear()</S>
                        <S>System.Security.SecureString Copy()</S>
                        <S>Void Dispose()</S>
                        <S>Void InsertAt(Int32, Char)</S>
                        <S>Boolean IsReadOnly()</S>
                        <S>Void MakeReadOnly()</S>
                        <S>Void RemoveAt(Int32)</S>
                        <S>Void SetAt(Int32, Char)</S>
                        <S>System.Span`1[System.Char] AcquireSpan(System.Runtime.InteropServices.SafeBuffer ByRef)</S>
                        <S>Void EnsureNotReadOnly()</S>
                        <S>Void EnsureNotDisposed()</S>
                        <S>IntPtr MarshalToBSTR()</S>
                        <S>IntPtr MarshalToString(Boolean, Boolean)</S>
                        <S>Int32 GetAlignedByteSize(Int32)</S>
                        <S>Void ProtectMemory()</S>
                        <S>Void UnprotectMemory()</S>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(Char*, Int32)</S>
                        <S>Void .ctor(System.Security.SecureString)</S>
                        <S>Int32 Length</S>
                        <S>System.Object _methodLock</S>
                        <S>UnmanagedBuffer _buffer</S>
                        <S>Int32 _decryptedLength</S>
                        <S>Boolean _encrypted</S>
                        <S>Boolean _readOnly</S>
                        <S>System.Security.SecureString+UnmanagedBuffer</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="152">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Void Initialize(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Int32 get_Length()</S>
                        <S>Void EnsureCapacity(Int32)</S>
                        <S>Void AppendChar(Char)</S>
                        <S>Void Clear()</S>
                        <S>System.Security.SecureString Copy()</S>
                        <S>Void Dispose()</S>
                        <S>Void InsertAt(Int32, Char)</S>
                        <S>Boolean IsReadOnly()</S>
                        <S>Void MakeReadOnly()</S>
                        <S>Void RemoveAt(Int32)</S>
                        <S>Void SetAt(Int32, Char)</S>
                        <S>System.Span`1[System.Char] AcquireSpan(System.Runtime.InteropServices.SafeBuffer ByRef)</S>
                        <S>Void EnsureNotReadOnly()</S>
                        <S>Void EnsureNotDisposed()</S>
                        <S>IntPtr MarshalToBSTR()</S>
                        <S>IntPtr MarshalToString(Boolean, Boolean)</S>
                        <S>Int32 GetAlignedByteSize(Int32)</S>
                        <S>Void ProtectMemory()</S>
                        <S>Void UnprotectMemory()</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="153">
                      <TNRef RefId="10" />
                      <IE>
                        <S>System.Security.SecureString+UnmanagedBuffer</S>
                      </IE>
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="154">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Int32 Length</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="155">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IDisposable</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">false</B>
                    <B N="IsVisible">true</B>
                    <Ref N="CustomAttributes" RefId="27" />
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="156">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AppId</S>
            <Obj N="Value" RefId="157">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AppId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="158">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Organization</S>
            <Obj N="Value" RefId="159">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Organization</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="160">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EnableErrorReporting</S>
            <Obj N="Value" RefId="161">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EnableErrorReporting</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="162">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LogDirectoryPath</S>
            <Obj N="Value" RefId="163">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LogDirectoryPath</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="164">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LogLevel</S>
            <Obj N="Value" RefId="165">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LogLevel</S>
                <Obj N="ParameterType" RefId="166">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.LogLevel</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.LogLevel</S>
                    <S N="AssemblyQualifiedName">Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.LogLevel, Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation</S>
                    <G N="GUID">2de70a19-f82e-39e7-bbdc-0dbbe24db868</G>
                    <B N="IsEnum">true</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">LogLevel</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="BaseType">System.Enum</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554444</I32>
                    <S N="Module">Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="166" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Ref N="DeclaredConstructors" RefId="20" />
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="167">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int32 value__</S>
                        <S>Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.LogLevel Default</S>
                        <S>Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.LogLevel All</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="168">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int32 value__</S>
                        <S>Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.LogLevel Default</S>
                        <S>Microsoft.Online.CSE.RestApiPowerShellModule.Instrumentation.LogLevel All</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredMethods" RefId="23" />
                    <Obj N="DeclaredNestedTypes" RefId="169">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="170">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.ISpanFormattable</S>
                        <S>System.IFormattable</S>
                        <S>System.IConvertible</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Ref N="CustomAttributes" RefId="27" />
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="171">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TrackPerformance</S>
            <Obj N="Value" RefId="172">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TrackPerformance</S>
                <Obj N="ParameterType" RefId="173">
                  <TNRef RefId="3" />
                  <ToString>System.Boolean</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Boolean</S>
                    <S N="AssemblyQualifiedName">System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">43cd2034-439c-3c86-8720-04079dd744e7</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">Boolean</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554682</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="173" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="174">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .cctor()</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="175">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Boolean m_value</S>
                        <S>System.String TrueString</S>
                        <S>System.String FalseString</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="176">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(Boolean)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(Boolean)</S>
                        <S>Boolean IsTrueStringIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean IsFalseStringIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean Parse(System.String)</S>
                        <S>Boolean Parse(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryParse(System.String, Boolean ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], Boolean ByRef)</S>
                        <S>System.ReadOnlySpan`1[System.Char] TrimWhiteSpaceAndNull(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>Boolean System.IParsable&lt;System.Boolean&gt;.Parse(System.String, System.IFormatProvider)</S>
                        <S>Boolean System.IParsable&lt;System.Boolean&gt;.TryParse(System.String, System.IFormatProvider, Boolean ByRef)</S>
                        <S>Boolean System.ISpanParsable&lt;System.Boolean&gt;.Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean System.ISpanParsable&lt;System.Boolean&gt;.TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, Boolean ByRef)</S>
                        <S>Boolean &lt;TryParse&gt;g__TryParseUncommon|20_0(System.ReadOnlySpan`1[System.Char], Boolean ByRef)</S>
                        <S>Void .cctor()</S>
                        <S>Boolean m_value</S>
                        <S>System.String TrueString</S>
                        <S>System.String FalseString</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="177">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(Boolean)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(Boolean)</S>
                        <S>Boolean IsTrueStringIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean IsFalseStringIgnoreCase(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean Parse(System.String)</S>
                        <S>Boolean Parse(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryParse(System.String, Boolean ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], Boolean ByRef)</S>
                        <S>System.ReadOnlySpan`1[System.Char] TrimWhiteSpaceAndNull(System.ReadOnlySpan`1[System.Char])</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>Boolean System.IParsable&lt;System.Boolean&gt;.Parse(System.String, System.IFormatProvider)</S>
                        <S>Boolean System.IParsable&lt;System.Boolean&gt;.TryParse(System.String, System.IFormatProvider, Boolean ByRef)</S>
                        <S>Boolean System.ISpanParsable&lt;System.Boolean&gt;.Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean System.ISpanParsable&lt;System.Boolean&gt;.TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, Boolean ByRef)</S>
                        <S>Boolean &lt;TryParse&gt;g__TryParseUncommon|20_0(System.ReadOnlySpan`1[System.Char], Boolean ByRef)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="178">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="179">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.IConvertible</S>
                        <S>System.IComparable`1[System.Boolean]</S>
                        <S>System.IEquatable`1[System.Boolean]</S>
                        <S>System.ISpanParsable`1[System.Boolean]</S>
                        <S>System.IParsable`1[System.Boolean]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">true</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <S N="TypeInitializer">Void .cctor()</S>
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="180">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.IsReadOnlyAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="181">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowProgress</S>
            <Obj N="Value" RefId="182">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowProgress</S>
                <Ref N="ParameterType" RefId="173" />
                <Obj N="Aliases" RefId="183">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseMultithreading</S>
            <Obj N="Value" RefId="184">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseMultithreading</S>
                <Ref N="ParameterType" RefId="173" />
                <Obj N="Aliases" RefId="185">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PageSize</S>
            <Obj N="Value" RefId="186">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PageSize</S>
                <Obj N="ParameterType" RefId="187">
                  <TNRef RefId="3" />
                  <ToString>System.UInt32</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.UInt32</S>
                    <S N="AssemblyQualifiedName">System.UInt32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">cdd03db4-22ab-30ea-b88c-9f2cffb2cf77</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">UInt32</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554939</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="187" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Ref N="DeclaredConstructors" RefId="20" />
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="188">
                      <TNRef RefId="7" />
                      <LST>
                        <S>UInt32 m_value</S>
                        <S>UInt32 MaxValue</S>
                        <S>UInt32 MinValue</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="189">
                      <TNRef RefId="8" />
                      <LST>
                        <S>UInt64 BigMul(UInt32, UInt32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(UInt32)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(UInt32)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>System.String ToString(System.String)</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>UInt32 Parse(System.String)</S>
                        <S>UInt32 Parse(System.String, System.Globalization.NumberStyles)</S>
                        <S>UInt32 Parse(System.String, System.IFormatProvider)</S>
                        <S>UInt32 Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.String, UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>UInt32 System.Numerics.IAdditionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Addition(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IAdditionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_CheckedAddition(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IAdditiveIdentity&lt;System.UInt32,System.UInt32&gt;.get_AdditiveIdentity()</S>
                        <S>System.ValueTuple`2[System.UInt32,System.UInt32] DivRem(UInt32, UInt32)</S>
                        <S>UInt32 LeadingZeroCount(UInt32)</S>
                        <S>UInt32 PopCount(UInt32)</S>
                        <S>UInt32 RotateLeft(UInt32, Int32)</S>
                        <S>UInt32 RotateRight(UInt32, Int32)</S>
                        <S>UInt32 TrailingZeroCount(UInt32)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryReadBigEndian(System.ReadOnlySpan`1[System.Byte], Boolean, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryReadLittleEndian(System.ReadOnlySpan`1[System.Byte], Boolean, UInt32 ByRef)</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.GetShortestBitLength()</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.GetByteCount()</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryWriteBigEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryWriteLittleEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>UInt32 System.Numerics.IBinaryNumber&lt;System.UInt32&gt;.get_AllBitsSet()</S>
                        <S>Boolean IsPow2(UInt32)</S>
                        <S>UInt32 Log2(UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_BitwiseAnd(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_BitwiseOr(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_ExclusiveOr(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_OnesComplement(UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_LessThan(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_LessThanOrEqual(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_GreaterThan(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_GreaterThanOrEqual(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IDecrementOperators&lt;System.UInt32&gt;.op_Decrement(UInt32)</S>
                        <S>UInt32 System.Numerics.IDecrementOperators&lt;System.UInt32&gt;.op_CheckedDecrement(UInt32)</S>
                        <S>UInt32 System.Numerics.IDivisionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Division(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_Equality(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_Inequality(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IIncrementOperators&lt;System.UInt32&gt;.op_Increment(UInt32)</S>
                        <S>UInt32 System.Numerics.IIncrementOperators&lt;System.UInt32&gt;.op_CheckedIncrement(UInt32)</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.get_MinValue()</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.get_MaxValue()</S>
                        <S>UInt32 System.Numerics.IModulusOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Modulus(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IMultiplicativeIdentity&lt;System.UInt32,System.UInt32&gt;.get_MultiplicativeIdentity()</S>
                        <S>UInt32 System.Numerics.IMultiplyOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Multiply(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IMultiplyOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_CheckedMultiply(UInt32, UInt32)</S>
                        <S>UInt32 Clamp(UInt32, UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumber&lt;System.UInt32&gt;.CopySign(UInt32, UInt32)</S>
                        <S>UInt32 Max(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumber&lt;System.UInt32&gt;.MaxNumber(UInt32, UInt32)</S>
                        <S>UInt32 Min(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumber&lt;System.UInt32&gt;.MinNumber(UInt32, UInt32)</S>
                        <S>Int32 Sign(UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.get_One()</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.UInt32&gt;.get_Radix()</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.get_Zero()</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.Abs(UInt32)</S>
                        <S>UInt32 CreateChecked[TOther](TOther)</S>
                        <S>UInt32 CreateSaturating[TOther](TOther)</S>
                        <S>UInt32 CreateTruncating[TOther](TOther)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsCanonical(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsComplexNumber(UInt32)</S>
                        <S>Boolean IsEvenInteger(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsFinite(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsImaginaryNumber(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsInfinity(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsInteger(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNaN(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNegative(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNegativeInfinity(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNormal(UInt32)</S>
                        <S>Boolean IsOddInteger(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsPositive(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsPositiveInfinity(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsRealNumber(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsSubnormal(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsZero(UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MaxMagnitude(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MaxMagnitudeNumber(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MinMagnitude(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MinMagnitudeNumber(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MultiplyAddEstimate(UInt32, UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertFromChecked[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean TryConvertFromChecked[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertFromSaturating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean TryConvertFromSaturating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertFromTruncating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean TryConvertFromTruncating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked[TOther](UInt32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating[TOther](UInt32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating[TOther](UInt32, TOther ByRef)</S>
                        <S>Boolean TryParse(System.String, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>UInt32 System.Numerics.IShiftOperators&lt;System.UInt32,System.Int32,System.UInt32&gt;.op_LeftShift(UInt32, Int32)</S>
                        <S>UInt32 System.Numerics.IShiftOperators&lt;System.UInt32,System.Int32,System.UInt32&gt;.op_RightShift(UInt32, Int32)</S>
                        <S>UInt32 System.Numerics.IShiftOperators&lt;System.UInt32,System.Int32,System.UInt32&gt;.op_UnsignedRightShift(UInt32, Int32)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, UInt32 ByRef)</S>
                        <S>UInt32 System.Numerics.ISubtractionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Subtraction(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.ISubtractionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_CheckedSubtraction(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IUnaryNegationOperators&lt;System.UInt32,System.UInt32&gt;.op_UnaryNegation(UInt32)</S>
                        <S>UInt32 System.Numerics.IUnaryNegationOperators&lt;System.UInt32,System.UInt32&gt;.op_CheckedUnaryNegation(UInt32)</S>
                        <S>UInt32 System.Numerics.IUnaryPlusOperators&lt;System.UInt32,System.UInt32&gt;.op_UnaryPlus(UInt32)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider, UInt32 ByRef)</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_IsSigned()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_MaxDigitCount()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_MaxHexDigitCount()</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_MaxValueDiv10()</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_OverflowMessage()</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.IsGreaterThanAsUnsigned(UInt32, UInt32)</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MultiplyBy10(UInt32)</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MultiplyBy16(UInt32)</S>
                        <S>UInt32 System.Numerics.IAdditiveIdentity&lt;System.UInt32,System.UInt32&gt;.AdditiveIdentity</S>
                        <S>UInt32 System.Numerics.IBinaryNumber&lt;System.UInt32&gt;.AllBitsSet</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.MinValue</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.MaxValue</S>
                        <S>UInt32 System.Numerics.IMultiplicativeIdentity&lt;System.UInt32,System.UInt32&gt;.MultiplicativeIdentity</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.One</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.UInt32&gt;.Radix</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.Zero</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.IsSigned</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MaxDigitCount</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MaxHexDigitCount</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MaxValueDiv10</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.OverflowMessage</S>
                        <S>UInt32 m_value</S>
                        <S>UInt32 MaxValue</S>
                        <S>UInt32 MinValue</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="190">
                      <TNRef RefId="9" />
                      <LST>
                        <S>UInt64 BigMul(UInt32, UInt32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(UInt32)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(UInt32)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.IFormatProvider)</S>
                        <S>System.String ToString(System.String)</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>UInt32 Parse(System.String)</S>
                        <S>UInt32 Parse(System.String, System.Globalization.NumberStyles)</S>
                        <S>UInt32 Parse(System.String, System.IFormatProvider)</S>
                        <S>UInt32 Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.String, UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.Globalization.NumberStyles, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>System.TypeCode GetTypeCode()</S>
                        <S>Boolean System.IConvertible.ToBoolean(System.IFormatProvider)</S>
                        <S>Char System.IConvertible.ToChar(System.IFormatProvider)</S>
                        <S>SByte System.IConvertible.ToSByte(System.IFormatProvider)</S>
                        <S>Byte System.IConvertible.ToByte(System.IFormatProvider)</S>
                        <S>Int16 System.IConvertible.ToInt16(System.IFormatProvider)</S>
                        <S>UInt16 System.IConvertible.ToUInt16(System.IFormatProvider)</S>
                        <S>Int32 System.IConvertible.ToInt32(System.IFormatProvider)</S>
                        <S>UInt32 System.IConvertible.ToUInt32(System.IFormatProvider)</S>
                        <S>Int64 System.IConvertible.ToInt64(System.IFormatProvider)</S>
                        <S>UInt64 System.IConvertible.ToUInt64(System.IFormatProvider)</S>
                        <S>Single System.IConvertible.ToSingle(System.IFormatProvider)</S>
                        <S>Double System.IConvertible.ToDouble(System.IFormatProvider)</S>
                        <S>System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider)</S>
                        <S>System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider)</S>
                        <S>System.Object System.IConvertible.ToType(System.Type, System.IFormatProvider)</S>
                        <S>UInt32 System.Numerics.IAdditionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Addition(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IAdditionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_CheckedAddition(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IAdditiveIdentity&lt;System.UInt32,System.UInt32&gt;.get_AdditiveIdentity()</S>
                        <S>System.ValueTuple`2[System.UInt32,System.UInt32] DivRem(UInt32, UInt32)</S>
                        <S>UInt32 LeadingZeroCount(UInt32)</S>
                        <S>UInt32 PopCount(UInt32)</S>
                        <S>UInt32 RotateLeft(UInt32, Int32)</S>
                        <S>UInt32 RotateRight(UInt32, Int32)</S>
                        <S>UInt32 TrailingZeroCount(UInt32)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryReadBigEndian(System.ReadOnlySpan`1[System.Byte], Boolean, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryReadLittleEndian(System.ReadOnlySpan`1[System.Byte], Boolean, UInt32 ByRef)</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.GetShortestBitLength()</S>
                        <S>Int32 System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.GetByteCount()</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryWriteBigEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>Boolean System.Numerics.IBinaryInteger&lt;System.UInt32&gt;.TryWriteLittleEndian(System.Span`1[System.Byte], Int32 ByRef)</S>
                        <S>UInt32 System.Numerics.IBinaryNumber&lt;System.UInt32&gt;.get_AllBitsSet()</S>
                        <S>Boolean IsPow2(UInt32)</S>
                        <S>UInt32 Log2(UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_BitwiseAnd(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_BitwiseOr(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_ExclusiveOr(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IBitwiseOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_OnesComplement(UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_LessThan(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_LessThanOrEqual(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_GreaterThan(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IComparisonOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_GreaterThanOrEqual(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IDecrementOperators&lt;System.UInt32&gt;.op_Decrement(UInt32)</S>
                        <S>UInt32 System.Numerics.IDecrementOperators&lt;System.UInt32&gt;.op_CheckedDecrement(UInt32)</S>
                        <S>UInt32 System.Numerics.IDivisionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Division(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_Equality(UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.IEqualityOperators&lt;System.UInt32,System.UInt32,System.Boolean&gt;.op_Inequality(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IIncrementOperators&lt;System.UInt32&gt;.op_Increment(UInt32)</S>
                        <S>UInt32 System.Numerics.IIncrementOperators&lt;System.UInt32&gt;.op_CheckedIncrement(UInt32)</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.get_MinValue()</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.get_MaxValue()</S>
                        <S>UInt32 System.Numerics.IModulusOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Modulus(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IMultiplicativeIdentity&lt;System.UInt32,System.UInt32&gt;.get_MultiplicativeIdentity()</S>
                        <S>UInt32 System.Numerics.IMultiplyOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Multiply(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IMultiplyOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_CheckedMultiply(UInt32, UInt32)</S>
                        <S>UInt32 Clamp(UInt32, UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumber&lt;System.UInt32&gt;.CopySign(UInt32, UInt32)</S>
                        <S>UInt32 Max(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumber&lt;System.UInt32&gt;.MaxNumber(UInt32, UInt32)</S>
                        <S>UInt32 Min(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumber&lt;System.UInt32&gt;.MinNumber(UInt32, UInt32)</S>
                        <S>Int32 Sign(UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.get_One()</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.UInt32&gt;.get_Radix()</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.get_Zero()</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.Abs(UInt32)</S>
                        <S>UInt32 CreateChecked[TOther](TOther)</S>
                        <S>UInt32 CreateSaturating[TOther](TOther)</S>
                        <S>UInt32 CreateTruncating[TOther](TOther)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsCanonical(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsComplexNumber(UInt32)</S>
                        <S>Boolean IsEvenInteger(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsFinite(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsImaginaryNumber(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsInfinity(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsInteger(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNaN(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNegative(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNegativeInfinity(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsNormal(UInt32)</S>
                        <S>Boolean IsOddInteger(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsPositive(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsPositiveInfinity(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsRealNumber(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsSubnormal(UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.IsZero(UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MaxMagnitude(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MaxMagnitudeNumber(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MinMagnitude(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MinMagnitudeNumber(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.MultiplyAddEstimate(UInt32, UInt32, UInt32)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertFromChecked[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean TryConvertFromChecked[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertFromSaturating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean TryConvertFromSaturating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertFromTruncating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean TryConvertFromTruncating[TOther](TOther, UInt32 ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToChecked[TOther](UInt32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToSaturating[TOther](UInt32, TOther ByRef)</S>
                        <S>Boolean System.Numerics.INumberBase&lt;System.UInt32&gt;.TryConvertToTruncating[TOther](UInt32, TOther ByRef)</S>
                        <S>Boolean TryParse(System.String, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>UInt32 System.Numerics.IShiftOperators&lt;System.UInt32,System.Int32,System.UInt32&gt;.op_LeftShift(UInt32, Int32)</S>
                        <S>UInt32 System.Numerics.IShiftOperators&lt;System.UInt32,System.Int32,System.UInt32&gt;.op_RightShift(UInt32, Int32)</S>
                        <S>UInt32 System.Numerics.IShiftOperators&lt;System.UInt32,System.Int32,System.UInt32&gt;.op_UnsignedRightShift(UInt32, Int32)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, UInt32 ByRef)</S>
                        <S>UInt32 System.Numerics.ISubtractionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_Subtraction(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.ISubtractionOperators&lt;System.UInt32,System.UInt32,System.UInt32&gt;.op_CheckedSubtraction(UInt32, UInt32)</S>
                        <S>UInt32 System.Numerics.IUnaryNegationOperators&lt;System.UInt32,System.UInt32&gt;.op_UnaryNegation(UInt32)</S>
                        <S>UInt32 System.Numerics.IUnaryNegationOperators&lt;System.UInt32,System.UInt32&gt;.op_CheckedUnaryNegation(UInt32)</S>
                        <S>UInt32 System.Numerics.IUnaryPlusOperators&lt;System.UInt32,System.UInt32&gt;.op_UnaryPlus(UInt32)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.Globalization.NumberStyles, System.IFormatProvider, UInt32 ByRef)</S>
                        <S>UInt32 Parse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Byte], System.IFormatProvider, UInt32 ByRef)</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_IsSigned()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_MaxDigitCount()</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_MaxHexDigitCount()</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_MaxValueDiv10()</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.get_OverflowMessage()</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.IsGreaterThanAsUnsigned(UInt32, UInt32)</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MultiplyBy10(UInt32)</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MultiplyBy16(UInt32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="191">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="192">
                      <TNRef RefId="11" />
                      <LST>
                        <S>UInt32 System.Numerics.IAdditiveIdentity&lt;System.UInt32,System.UInt32&gt;.AdditiveIdentity</S>
                        <S>UInt32 System.Numerics.IBinaryNumber&lt;System.UInt32&gt;.AllBitsSet</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.MinValue</S>
                        <S>UInt32 System.Numerics.IMinMaxValue&lt;System.UInt32&gt;.MaxValue</S>
                        <S>UInt32 System.Numerics.IMultiplicativeIdentity&lt;System.UInt32,System.UInt32&gt;.MultiplicativeIdentity</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.One</S>
                        <S>Int32 System.Numerics.INumberBase&lt;System.UInt32&gt;.Radix</S>
                        <S>UInt32 System.Numerics.INumberBase&lt;System.UInt32&gt;.Zero</S>
                        <S>Boolean System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.IsSigned</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MaxDigitCount</S>
                        <S>Int32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MaxHexDigitCount</S>
                        <S>UInt32 System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.MaxValueDiv10</S>
                        <S>System.String System.IBinaryIntegerParseAndFormatInfo&lt;System.UInt32&gt;.OverflowMessage</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="193">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.IConvertible</S>
                        <S>System.ISpanFormattable</S>
                        <S>System.IFormattable</S>
                        <S>System.IComparable`1[System.UInt32]</S>
                        <S>System.IEquatable`1[System.UInt32]</S>
                        <S>System.Numerics.IBinaryInteger`1[System.UInt32]</S>
                        <S>System.Numerics.IBinaryNumber`1[System.UInt32]</S>
                        <S>System.Numerics.IBitwiseOperators`3[System.UInt32,System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.INumber`1[System.UInt32]</S>
                        <S>System.Numerics.IComparisonOperators`3[System.UInt32,System.UInt32,System.Boolean]</S>
                        <S>System.Numerics.IEqualityOperators`3[System.UInt32,System.UInt32,System.Boolean]</S>
                        <S>System.Numerics.IModulusOperators`3[System.UInt32,System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.INumberBase`1[System.UInt32]</S>
                        <S>System.Numerics.IAdditionOperators`3[System.UInt32,System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.IAdditiveIdentity`2[System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.IDecrementOperators`1[System.UInt32]</S>
                        <S>System.Numerics.IDivisionOperators`3[System.UInt32,System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.IIncrementOperators`1[System.UInt32]</S>
                        <S>System.Numerics.IMultiplicativeIdentity`2[System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.IMultiplyOperators`3[System.UInt32,System.UInt32,System.UInt32]</S>
                        <S>System.ISpanParsable`1[System.UInt32]</S>
                        <S>System.IParsable`1[System.UInt32]</S>
                        <S>System.Numerics.ISubtractionOperators`3[System.UInt32,System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.IUnaryPlusOperators`2[System.UInt32,System.UInt32]</S>
                        <S>System.Numerics.IUnaryNegationOperators`2[System.UInt32,System.UInt32]</S>
                        <S>System.IUtf8SpanFormattable</S>
                        <S>System.IUtf8SpanParsable`1[System.UInt32]</S>
                        <S>System.Numerics.IShiftOperators`3[System.UInt32,System.Int32,System.UInt32]</S>
                        <S>System.Numerics.IMinMaxValue`1[System.UInt32]</S>
                        <S>System.Numerics.IUnsignedNumber`1[System.UInt32]</S>
                        <S>System.IBinaryIntegerParseAndFormatInfo`1[System.UInt32]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">true</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="194">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.IsReadOnlyAttribute()]</S>
                        <S>[System.CLSCompliantAttribute((Boolean)False)]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="195">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ManagedIdentity</S>
            <Obj N="Value" RefId="196">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ManagedIdentity</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="197">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ManagedIdentityAccountId</S>
            <Obj N="Value" RefId="198">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ManagedIdentityAccountId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="199">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Device</S>
            <Obj N="Value" RefId="200">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Device</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="201">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InlineCredential</S>
            <Obj N="Value" RefId="202">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InlineCredential</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="203">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CertificateThumbprint</S>
            <Obj N="Value" RefId="204">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CertificateThumbprint</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="205">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="206">
    <TNRef RefId="0" />
    <MS>
      <S N="Name">Connect-IPPSSession</S>
      <Obj N="Parameters" RefId="207">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ConnectionUri</S>
            <Obj N="Value" RefId="208">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConnectionUri</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="209">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AzureADAuthorizationEndpointUri</S>
            <Obj N="Value" RefId="210">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AzureADAuthorizationEndpointUri</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="211">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DelegatedOrganization</S>
            <Obj N="Value" RefId="212">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DelegatedOrganization</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="213">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PSSessionOption</S>
            <Obj N="Value" RefId="214">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PSSessionOption</S>
                <Ref N="ParameterType" RefId="30" />
                <Obj N="Aliases" RefId="215">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BypassMailboxAnchoring</S>
            <Obj N="Value" RefId="216">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BypassMailboxAnchoring</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="217">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Prefix</S>
            <Obj N="Value" RefId="218">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Prefix</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="219">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CommandName</S>
            <Obj N="Value" RefId="220">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CommandName</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="221">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FormatTypeName</S>
            <Obj N="Value" RefId="222">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FormatTypeName</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="223">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseRPSSession</S>
            <Obj N="Value" RefId="224">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseRPSSession</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="225">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowBanner</S>
            <Obj N="Value" RefId="226">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowBanner</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="227">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DisableWAM</S>
            <Obj N="Value" RefId="228">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DisableWAM</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="229">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AccessToken</S>
            <Obj N="Value" RefId="230">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AccessToken</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="231">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="232">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="233">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="234">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="235">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="236">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="237">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="238">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="239">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="240">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="241">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="242">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="243">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="244">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="245">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="246">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="247">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="248">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="249">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="250">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="251">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="252">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="253">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="254">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="255">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="256">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="257">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Credential</S>
            <Obj N="Value" RefId="258">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Credential</S>
                <Ref N="ParameterType" RefId="131" />
                <Obj N="Aliases" RefId="259">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Certificate</S>
            <Obj N="Value" RefId="260">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Certificate</S>
                <Ref N="ParameterType" RefId="79" />
                <Obj N="Aliases" RefId="261">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CertificateFilePath</S>
            <Obj N="Value" RefId="262">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CertificateFilePath</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="263">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CertificatePassword</S>
            <Obj N="Value" RefId="264">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CertificatePassword</S>
                <Ref N="ParameterType" RefId="147" />
                <Obj N="Aliases" RefId="265">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AppId</S>
            <Obj N="Value" RefId="266">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AppId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="267">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Organization</S>
            <Obj N="Value" RefId="268">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Organization</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="269">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CertificateThumbprint</S>
            <Obj N="Value" RefId="270">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CertificateThumbprint</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="271">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="272">
    <TNRef RefId="0" />
    <MS>
      <S N="Name">Disconnect-ExchangeOnline</S>
      <Obj N="Parameters" RefId="273">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ConnectionId</S>
            <Obj N="Value" RefId="274">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConnectionId</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="275">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ModulePrefix</S>
            <Obj N="Value" RefId="276">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModulePrefix</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="277">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="278">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="279">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="280">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="281">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="282">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="283">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="284">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="285">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="286">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="287">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="288">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="289">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="290">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="291">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="292">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="293">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="294">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="295">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="296">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="297">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="298">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="299">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="300">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="301">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WhatIf</S>
            <Obj N="Value" RefId="302">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WhatIf</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="303">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wi</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Confirm</S>
            <Obj N="Value" RefId="304">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Confirm</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="305">
                  <TNRef RefId="13" />
                  <LST>
                    <S>cf</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="306">
    <TNRef RefId="0" />
    <MS>
      <S N="Name">Get-WrappedCommand</S>
      <Obj N="Parameters" RefId="307">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">CommandName</S>
            <Obj N="Value" RefId="308">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CommandName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="309">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ModuleName</S>
            <Obj N="Value" RefId="310">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="311">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CommandType</S>
            <Obj N="Value" RefId="312">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CommandType</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="313">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="314">
    <TNRef RefId="0" />
    <MS>
      <S N="Name">IsCloudShellEnvironment</S>
      <Obj N="Parameters" RefId="315">
        <TNRef RefId="1" />
        <DCT />
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="316">
    <TNRef RefId="0" />
    <MS>
      <S N="Name">UpdateImplicitRemotingHandler</S>
      <Obj N="Parameters" RefId="317">
        <TNRef RefId="1" />
        <DCT />
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="318">
    <TN RefId="15">
      <T>Selected.System.Management.Automation.CmdletInfo</T>
      <T>System.Management.Automation.PSCustomObject</T>
      <T>System.Object</T>
    </TN>
    <MS>
      <S N="Name">Add-VivaModuleFeaturePolicy</S>
      <Obj N="Parameters" RefId="319">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ModuleId</S>
            <Obj N="Value" RefId="320">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="321">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FeatureId</S>
            <Obj N="Value" RefId="322">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FeatureId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="323">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="324">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="325">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsFeatureEnabled</S>
            <Obj N="Value" RefId="326">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsFeatureEnabled</S>
                <Ref N="ParameterType" RefId="173" />
                <Obj N="Aliases" RefId="327">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsUserControlEnabled</S>
            <Obj N="Value" RefId="328">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsUserControlEnabled</S>
                <Obj N="ParameterType" RefId="329">
                  <TNRef RefId="3" />
                  <ToString>System.Nullable`1[System.Boolean]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</S>
                    <S N="AssemblyQualifiedName">System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">46ad0d21-0e57-3cd7-b491-6125deebc65a</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">true</B>
                    <B N="IsGenericType">true</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">Nullable`1</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554827</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="329" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="330">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Boolean)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="331">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Boolean hasValue</S>
                        <S>Boolean value</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="332">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Boolean get_HasValue()</S>
                        <S>Boolean get_Value()</S>
                        <S>Boolean GetValueOrDefault()</S>
                        <S>Boolean GetValueOrDefault(Boolean)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.Nullable`1[System.Boolean] op_Implicit(Boolean)</S>
                        <S>Boolean op_Explicit(System.Nullable`1[System.Boolean])</S>
                        <S>Void .ctor(Boolean)</S>
                        <S>Boolean HasValue</S>
                        <S>Boolean Value</S>
                        <S>Boolean hasValue</S>
                        <S>Boolean value</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="333">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Boolean get_HasValue()</S>
                        <S>Boolean get_Value()</S>
                        <S>Boolean GetValueOrDefault()</S>
                        <S>Boolean GetValueOrDefault(Boolean)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.Nullable`1[System.Boolean] op_Implicit(Boolean)</S>
                        <S>Boolean op_Explicit(System.Nullable`1[System.Boolean])</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="334">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="335">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Boolean HasValue</S>
                        <S>Boolean Value</S>
                      </LST>
                    </Obj>
                    <Ref N="ImplementedInterfaces" RefId="5" />
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Obj N="GenericTypeArguments" RefId="336">
                      <TNRef RefId="4" />
                      <LST>
                        <Ref RefId="173" />
                      </LST>
                    </Obj>
                    <S N="Attributes">Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="337">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.Versioning.NonVersionableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="338">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsUserOptedInByDefault</S>
            <Obj N="Value" RefId="339">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsUserOptedInByDefault</S>
                <Ref N="ParameterType" RefId="329" />
                <Obj N="Aliases" RefId="340">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupIds</S>
            <Obj N="Value" RefId="341">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupIds</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="342">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserIds</S>
            <Obj N="Value" RefId="343">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserIds</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="344">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Everyone</S>
            <Obj N="Value" RefId="345">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Everyone</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="346">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="347">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Obj N="ParameterType" RefId="348">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Exchange.Management.RestApiClient.Unlimited`1[[System.UInt32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</S>
                    <S N="AssemblyQualifiedName">Microsoft.Exchange.Management.RestApiClient.Unlimited`1[[System.UInt32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Exchange.Management.RestApiClient</S>
                    <G N="GUID">06da3749-aba8-3162-8c02-3218c72d9857</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">true</B>
                    <B N="IsGenericType">true</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">Unlimited`1</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554474</I32>
                    <S N="Module">Microsoft.Exchange.Management.RestApiClient.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="348" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="349">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(UInt32)</S>
                        <S>Void .ctor(System.String)</S>
                        <S>Void .cctor()</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="350">
                      <TNRef RefId="7" />
                      <LST>
                        <S>UInt32 limitedValue</S>
                        <S>Boolean isUnlimited</S>
                        <S>System.Type[] validTypeMathOperations</S>
                        <S>System.String unlimitedString</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="351">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] get_UnlimitedValue()</S>
                        <S>System.String get_UnlimitedString()</S>
                        <S>Boolean get_IsUnlimited()</S>
                        <S>UInt32 get_Value()</S>
                        <S>Void set_Value(UInt32)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] Parse(System.String)</S>
                        <S>Boolean TryParse(System.String, Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] ByRef)</S>
                        <S>Boolean op_Equality(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_Inequality(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_GreaterThan(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_GreaterThanOrEqual(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_LessThan(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_LessThanOrEqual(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Division(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Multiply(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Addition(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Subtraction(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Implicit(UInt32)</S>
                        <S>UInt32 op_Explicit(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(UInt32)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Int32 CompareTo(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Int32 System.IComparable.CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(UInt32)</S>
                        <S>Boolean Equals(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] ExecDynamicOperation(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object, System.String)</S>
                        <S>System.Object UnBucketT(System.Object)</S>
                        <S>Boolean IsValidRightOperand(System.Object)</S>
                        <S>UInt32 DynamicResolveOperation(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object, System.String)</S>
                        <S>Void .ctor(UInt32)</S>
                        <S>Void .ctor(System.String)</S>
                        <S>Void .cctor()</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] UnlimitedValue</S>
                        <S>System.String UnlimitedString</S>
                        <S>Boolean IsUnlimited</S>
                        <S>UInt32 Value</S>
                        <S>UInt32 limitedValue</S>
                        <S>Boolean isUnlimited</S>
                        <S>System.Type[] validTypeMathOperations</S>
                        <S>System.String unlimitedString</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1+&lt;&gt;c__DisplayClass41_0[T]</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="352">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] get_UnlimitedValue()</S>
                        <S>System.String get_UnlimitedString()</S>
                        <S>Boolean get_IsUnlimited()</S>
                        <S>UInt32 get_Value()</S>
                        <S>Void set_Value(UInt32)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] Parse(System.String)</S>
                        <S>Boolean TryParse(System.String, Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] ByRef)</S>
                        <S>Boolean op_Equality(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_Inequality(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_GreaterThan(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_GreaterThanOrEqual(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_LessThan(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean op_LessThanOrEqual(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Division(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Multiply(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Addition(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Subtraction(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object)</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] op_Implicit(UInt32)</S>
                        <S>UInt32 op_Explicit(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(UInt32)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Int32 CompareTo(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Int32 System.IComparable.CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(UInt32)</S>
                        <S>Boolean Equals(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32])</S>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] ExecDynamicOperation(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object, System.String)</S>
                        <S>System.Object UnBucketT(System.Object)</S>
                        <S>Boolean IsValidRightOperand(System.Object)</S>
                        <S>UInt32 DynamicResolveOperation(Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32], System.Object, System.String)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="353">
                      <TNRef RefId="10" />
                      <IE>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1+&lt;&gt;c__DisplayClass41_0[T]</S>
                      </IE>
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="354">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Microsoft.Exchange.Management.RestApiClient.Unlimited`1[System.UInt32] UnlimitedValue</S>
                        <S>System.String UnlimitedString</S>
                        <S>Boolean IsUnlimited</S>
                        <S>UInt32 Value</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="355">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.IFormattable</S>
                        <S>System.IEquatable`1[System.UInt32]</S>
                        <S>System.IComparable`1[System.UInt32]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Obj N="GenericTypeArguments" RefId="356">
                      <TNRef RefId="4" />
                      <LST>
                        <Ref RefId="187" />
                      </LST>
                    </Obj>
                    <S N="Attributes">Public, SequentialLayout, Sealed, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <S N="TypeInitializer">Void .cctor()</S>
                    <B N="IsSerializable">false</B>
                    <B N="IsVisible">true</B>
                    <Ref N="CustomAttributes" RefId="27" />
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="357">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="358">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="359">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="360">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="361">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="362">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="363">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="364">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="365">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="366">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="367">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="368">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="369">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="370">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="371">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="372">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="373">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="374">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="375">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="376">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="377">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="378">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="379">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="380">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="381">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WhatIf</S>
            <Obj N="Value" RefId="382">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WhatIf</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="383">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wi</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Confirm</S>
            <Obj N="Value" RefId="384">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Confirm</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="385">
                  <TNRef RefId="13" />
                  <LST>
                    <S>cf</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="386">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Add-VivaOrgInsightsDelegatedRole</S>
      <Obj N="Parameters" RefId="387">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Delegate</S>
            <Obj N="Value" RefId="388">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Delegate</S>
                <Obj N="ParameterType" RefId="389">
                  <TNRef RefId="3" />
                  <ToString>System.Guid</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Guid</S>
                    <S N="AssemblyQualifiedName">System.Guid, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">fc33ee22-8a38-3200-b80d-f993babaf4e0</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">Guid</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554759</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="389" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="390">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Byte[])</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte])</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte], Boolean)</S>
                        <S>Void .ctor(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)</S>
                        <S>Void .ctor(Int32, Int16, Int16, Byte[])</S>
                        <S>Void .ctor(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)</S>
                        <S>Void .ctor(System.String)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="391">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int32 _a</S>
                        <S>Int16 _b</S>
                        <S>Int16 _c</S>
                        <S>Byte _d</S>
                        <S>Byte _e</S>
                        <S>Byte _f</S>
                        <S>Byte _g</S>
                        <S>Byte _h</S>
                        <S>Byte _i</S>
                        <S>Byte _j</S>
                        <S>Byte _k</S>
                        <S>System.Guid Empty</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="392">
                      <TNRef RefId="8" />
                      <LST>
                        <S>System.Guid get_AllBitsSet()</S>
                        <S>Void ThrowGuidArrayCtorArgumentException()</S>
                        <S>Int32 get_Variant()</S>
                        <S>Int32 get_Version()</S>
                        <S>System.Guid CreateVersion7()</S>
                        <S>System.Guid CreateVersion7(System.DateTimeOffset)</S>
                        <S>System.Guid Parse(System.String)</S>
                        <S>System.Guid Parse(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryParse(System.String, System.Guid ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.Guid ByRef)</S>
                        <S>System.Guid ParseExact(System.String, System.String)</S>
                        <S>System.Guid ParseExact(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryParseExact(System.String, System.String, System.Guid ByRef)</S>
                        <S>Boolean TryParseExact(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Guid ByRef)</S>
                        <S>Boolean TryParseGuid(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactB(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactD(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactN(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactP(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactX(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Byte DecodeByte(Char, Char, Int32 ByRef)</S>
                        <S>Boolean TryParseHex(System.ReadOnlySpan`1[System.Char], UInt16 ByRef, Boolean ByRef)</S>
                        <S>Boolean TryParseHex(System.ReadOnlySpan`1[System.Char], UInt32 ByRef)</S>
                        <S>Boolean TryParseHex(System.ReadOnlySpan`1[System.Char], UInt32 ByRef, Boolean ByRef)</S>
                        <S>System.ReadOnlySpan`1[System.Char] EatAllWhitespace(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean IsHexPrefix(System.ReadOnlySpan`1[System.Char], Int32)</S>
                        <S>Byte[] ToByteArray()</S>
                        <S>Byte[] ToByteArray(Boolean)</S>
                        <S>Boolean TryWriteBytes(System.Span`1[System.Byte])</S>
                        <S>Boolean TryWriteBytes(System.Span`1[System.Byte], Boolean, Int32 ByRef)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(System.Guid)</S>
                        <S>Boolean EqualsCore(System.Guid ByRef, System.Guid ByRef)</S>
                        <S>Int32 GetResult(UInt32, UInt32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(System.Guid)</S>
                        <S>Boolean op_Equality(System.Guid, System.Guid)</S>
                        <S>Boolean op_Inequality(System.Guid, System.Guid)</S>
                        <S>Int32 HexsToChars[TChar](TChar*, Int32, Int32)</S>
                        <S>Int32 HexsToCharsHexOutput[TChar](TChar*, Int32, Int32)</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.String)</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean System.ISpanFormattable.TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean System.IUtf8SpanFormattable.TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormatCore[TChar](System.Span`1[TChar], Int32 ByRef, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryFormatCore[TChar](System.Span`1[TChar], Int32 ByRef, Int32)</S>
                        <S>Boolean TryFormatX[TChar](System.Span`1[TChar], Int32 ByRef)</S>
                        <S>System.ValueTuple`3[System.Runtime.Intrinsics.Vector128`1[System.Byte],System.Runtime.Intrinsics.Vector128`1[System.Byte],System.Runtime.Intrinsics.Vector128`1[System.Byte]] FormatGuidVector128Utf8(System.Guid, Boolean)</S>
                        <S>Boolean op_LessThan(System.Guid, System.Guid)</S>
                        <S>Boolean op_LessThanOrEqual(System.Guid, System.Guid)</S>
                        <S>Boolean op_GreaterThan(System.Guid, System.Guid)</S>
                        <S>Boolean op_GreaterThanOrEqual(System.Guid, System.Guid)</S>
                        <S>System.Guid Parse(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.String, System.IFormatProvider, System.Guid ByRef)</S>
                        <S>System.Guid Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, System.Guid ByRef)</S>
                        <S>Void ThrowBadGuidFormatSpecification()</S>
                        <S>System.Guid NewGuid()</S>
                        <S>Void ThrowForHr(Int32)</S>
                        <S>Boolean &lt;TryParseExactD&gt;g__TryCompatParsing|46_0(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Void .ctor(Byte[])</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte])</S>
                        <S>Void .ctor(System.ReadOnlySpan`1[System.Byte], Boolean)</S>
                        <S>Void .ctor(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)</S>
                        <S>Void .ctor(Int32, Int16, Int16, Byte[])</S>
                        <S>Void .ctor(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)</S>
                        <S>Void .ctor(System.String)</S>
                        <S>System.Guid AllBitsSet</S>
                        <S>Int32 Variant</S>
                        <S>Int32 Version</S>
                        <S>Int32 _a</S>
                        <S>Int16 _b</S>
                        <S>Int16 _c</S>
                        <S>Byte _d</S>
                        <S>Byte _e</S>
                        <S>Byte _f</S>
                        <S>Byte _g</S>
                        <S>Byte _h</S>
                        <S>Byte _i</S>
                        <S>Byte _j</S>
                        <S>Byte _k</S>
                        <S>System.Guid Empty</S>
                        <S>System.Guid+GuidParseThrowStyle</S>
                        <S>System.Guid+ParseFailure</S>
                        <S>System.Guid+GuidResult</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="393">
                      <TNRef RefId="9" />
                      <LST>
                        <S>System.Guid get_AllBitsSet()</S>
                        <S>Void ThrowGuidArrayCtorArgumentException()</S>
                        <S>Int32 get_Variant()</S>
                        <S>Int32 get_Version()</S>
                        <S>System.Guid CreateVersion7()</S>
                        <S>System.Guid CreateVersion7(System.DateTimeOffset)</S>
                        <S>System.Guid Parse(System.String)</S>
                        <S>System.Guid Parse(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryParse(System.String, System.Guid ByRef)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.Guid ByRef)</S>
                        <S>System.Guid ParseExact(System.String, System.String)</S>
                        <S>System.Guid ParseExact(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryParseExact(System.String, System.String, System.Guid ByRef)</S>
                        <S>Boolean TryParseExact(System.ReadOnlySpan`1[System.Char], System.ReadOnlySpan`1[System.Char], System.Guid ByRef)</S>
                        <S>Boolean TryParseGuid(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactB(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactD(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactN(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactP(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Boolean TryParseExactX(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                        <S>Byte DecodeByte(Char, Char, Int32 ByRef)</S>
                        <S>Boolean TryParseHex(System.ReadOnlySpan`1[System.Char], UInt16 ByRef, Boolean ByRef)</S>
                        <S>Boolean TryParseHex(System.ReadOnlySpan`1[System.Char], UInt32 ByRef)</S>
                        <S>Boolean TryParseHex(System.ReadOnlySpan`1[System.Char], UInt32 ByRef, Boolean ByRef)</S>
                        <S>System.ReadOnlySpan`1[System.Char] EatAllWhitespace(System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean IsHexPrefix(System.ReadOnlySpan`1[System.Char], Int32)</S>
                        <S>Byte[] ToByteArray()</S>
                        <S>Byte[] ToByteArray(Boolean)</S>
                        <S>Boolean TryWriteBytes(System.Span`1[System.Byte])</S>
                        <S>Boolean TryWriteBytes(System.Span`1[System.Byte], Boolean, Int32 ByRef)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Boolean Equals(System.Guid)</S>
                        <S>Boolean EqualsCore(System.Guid ByRef, System.Guid ByRef)</S>
                        <S>Int32 GetResult(UInt32, UInt32)</S>
                        <S>Int32 CompareTo(System.Object)</S>
                        <S>Int32 CompareTo(System.Guid)</S>
                        <S>Boolean op_Equality(System.Guid, System.Guid)</S>
                        <S>Boolean op_Inequality(System.Guid, System.Guid)</S>
                        <S>Int32 HexsToChars[TChar](TChar*, Int32, Int32)</S>
                        <S>Int32 HexsToCharsHexOutput[TChar](TChar*, Int32, Int32)</S>
                        <S>System.String ToString()</S>
                        <S>System.String ToString(System.String)</S>
                        <S>System.String ToString(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean System.ISpanFormattable.TryFormat(System.Span`1[System.Char], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean System.IUtf8SpanFormattable.TryFormat(System.Span`1[System.Byte], Int32 ByRef, System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryFormatCore[TChar](System.Span`1[TChar], Int32 ByRef, System.ReadOnlySpan`1[System.Char])</S>
                        <S>Boolean TryFormatCore[TChar](System.Span`1[TChar], Int32 ByRef, Int32)</S>
                        <S>Boolean TryFormatX[TChar](System.Span`1[TChar], Int32 ByRef)</S>
                        <S>System.ValueTuple`3[System.Runtime.Intrinsics.Vector128`1[System.Byte],System.Runtime.Intrinsics.Vector128`1[System.Byte],System.Runtime.Intrinsics.Vector128`1[System.Byte]] FormatGuidVector128Utf8(System.Guid, Boolean)</S>
                        <S>Boolean op_LessThan(System.Guid, System.Guid)</S>
                        <S>Boolean op_LessThanOrEqual(System.Guid, System.Guid)</S>
                        <S>Boolean op_GreaterThan(System.Guid, System.Guid)</S>
                        <S>Boolean op_GreaterThanOrEqual(System.Guid, System.Guid)</S>
                        <S>System.Guid Parse(System.String, System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.String, System.IFormatProvider, System.Guid ByRef)</S>
                        <S>System.Guid Parse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider)</S>
                        <S>Boolean TryParse(System.ReadOnlySpan`1[System.Char], System.IFormatProvider, System.Guid ByRef)</S>
                        <S>Void ThrowBadGuidFormatSpecification()</S>
                        <S>System.Guid NewGuid()</S>
                        <S>Void ThrowForHr(Int32)</S>
                        <S>Boolean &lt;TryParseExactD&gt;g__TryCompatParsing|46_0(System.ReadOnlySpan`1[System.Char], GuidResult ByRef)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="394">
                      <TNRef RefId="10" />
                      <IE>
                        <S>System.Guid+GuidParseThrowStyle</S>
                        <S>System.Guid+ParseFailure</S>
                        <S>System.Guid+GuidResult</S>
                      </IE>
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="395">
                      <TNRef RefId="11" />
                      <LST>
                        <S>System.Guid AllBitsSet</S>
                        <S>Int32 Variant</S>
                        <S>Int32 Version</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="396">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.ISpanFormattable</S>
                        <S>System.IFormattable</S>
                        <S>System.IComparable</S>
                        <S>System.IComparable`1[System.Guid]</S>
                        <S>System.IEquatable`1[System.Guid]</S>
                        <S>System.ISpanParsable`1[System.Guid]</S>
                        <S>System.IParsable`1[System.Guid]</S>
                        <S>System.IUtf8SpanFormattable</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="397">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.IsReadOnlyAttribute()]</S>
                        <S>[System.Runtime.Versioning.NonVersionableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="398">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Delegator</S>
            <Obj N="Value" RefId="399">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Delegator</S>
                <Ref N="ParameterType" RefId="389" />
                <Obj N="Aliases" RefId="400">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="401">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="402">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="403">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="404">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="405">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="406">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="407">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="408">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="409">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="410">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="411">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="412">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="413">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="414">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="415">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="416">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="417">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="418">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="419">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="420">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="421">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="422">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="423">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="424">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="425">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="426">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="427">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-ConnectionInformation</S>
      <Obj N="Parameters" RefId="428">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ConnectionId</S>
            <Obj N="Value" RefId="429">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConnectionId</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="430">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ModulePrefix</S>
            <Obj N="Value" RefId="431">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModulePrefix</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="432">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="433">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="434">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="435">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="436">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="437">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="438">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="439">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="440">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="441">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="442">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="443">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="444">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="445">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="446">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="447">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="448">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="449">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="450">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="451">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="452">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="453">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="454">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="455">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="456">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="457">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-DefaultTenantBriefingConfig</S>
      <Obj N="Parameters" RefId="458">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="459">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="460">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="461">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="462">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="463">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="464">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="465">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="466">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="467">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="468">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="469">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="470">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="471">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="472">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="473">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="474">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="475">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="476">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="477">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="478">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="479">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="480">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="481">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="482">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="483">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="484">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="485">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-DefaultTenantMyAnalyticsFeatureConfig</S>
      <Obj N="Parameters" RefId="486">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="487">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="488">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="489">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="490">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="491">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="492">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="493">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="494">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="495">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="496">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="497">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="498">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="499">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="500">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="501">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="502">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="503">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="504">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="505">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="506">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="507">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="508">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="509">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="510">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="511">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="512">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="513">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXOCasMailbox</S>
      <Obj N="Parameters" RefId="514">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Filter</S>
            <Obj N="Value" RefId="515">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Filter</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="516">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Anr</S>
            <Obj N="Value" RefId="517">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Anr</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="518">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OrganizationalUnit</S>
            <Obj N="Value" RefId="519">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OrganizationalUnit</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="520">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Properties</S>
            <Obj N="Value" RefId="521">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Properties</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="522">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PropertySets</S>
            <Obj N="Value" RefId="523">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PropertySets</S>
                <Obj N="ParameterType" RefId="524">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet[]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet[]</S>
                    <S N="AssemblyQualifiedName">Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet[], Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Exchange.Management.RestApiClient</S>
                    <G N="GUID">00000000-0000-0000-0000-000000000000</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">true</B>
                    <B N="ContainsGenericParameters">false</B>
                    <Nil N="StructLayoutAttribute" />
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">PropertySet[]</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <Obj N="BaseType" RefId="525">
                      <S>System.Array</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554432</I32>
                    <S N="Module">Microsoft.Exchange.Management.RestApiClient.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="524" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="526">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Ref N="DeclaredFields" RefId="59" />
                    <Obj N="DeclaredMembers" RefId="527">
                      <TNRef RefId="8" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="528">
                      <TNRef RefId="9" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="529">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="530">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.ICloneable</S>
                        <S>System.Collections.IList</S>
                        <S>System.Collections.ICollection</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.Collections.IStructuralComparable</S>
                        <S>System.Collections.IStructuralEquatable</S>
                        <S>System.Collections.Generic.IList`1[Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.ICollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyList`1[Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyCollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoCasMailbox+PropertySet]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">true</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">true</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, Serializable</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="531">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="532">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProtocolSettings</S>
            <Obj N="Value" RefId="533">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProtocolSettings</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="534">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ActiveSyncDebugLogging</S>
            <Obj N="Value" RefId="535">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ActiveSyncDebugLogging</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="536">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReadIsOptimizedForAccessibility</S>
            <Obj N="Value" RefId="537">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReadIsOptimizedForAccessibility</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="538">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IgnoreDefaultScope</S>
            <Obj N="Value" RefId="539">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IgnoreDefaultScope</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="540">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GetImapProtocolLog</S>
            <Obj N="Value" RefId="541">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GetImapProtocolLog</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="542">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GetPopProtocolLog</S>
            <Obj N="Value" RefId="543">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GetPopProtocolLog</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="544">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SendLogsTo</S>
            <Obj N="Value" RefId="545">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SendLogsTo</S>
                <Obj N="ParameterType" RefId="546">
                  <TNRef RefId="3" />
                  <ToString>System.Collections.Generic.List`1[System.String]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</S>
                    <S N="AssemblyQualifiedName">System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System.Collections.Generic</S>
                    <G N="GUID">e3f698e0-5f3c-3691-b356-922986b4fbf1</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">true</B>
                    <B N="IsGenericType">true</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">List`1</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <Obj N="BaseType" RefId="547">
                      <S>System.Object</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33557070</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="546" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="548">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(Int32)</S>
                        <S>Void .ctor(System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>Void .cctor()</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="549">
                      <TNRef RefId="7" />
                      <LST>
                        <S>System.String[] _items</S>
                        <S>Int32 _size</S>
                        <S>Int32 _version</S>
                        <S>System.String[] s_emptyArray</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="550">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int32 get_Capacity()</S>
                        <S>Void set_Capacity(Int32)</S>
                        <S>Int32 get_Count()</S>
                        <S>Boolean System.Collections.IList.get_IsFixedSize()</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly()</S>
                        <S>Boolean System.Collections.IList.get_IsReadOnly()</S>
                        <S>Boolean System.Collections.ICollection.get_IsSynchronized()</S>
                        <S>System.Object System.Collections.ICollection.get_SyncRoot()</S>
                        <S>System.String get_Item(Int32)</S>
                        <S>Void set_Item(Int32, System.String)</S>
                        <S>Boolean IsCompatibleObject(System.Object)</S>
                        <S>System.Object System.Collections.IList.get_Item(Int32)</S>
                        <S>Void System.Collections.IList.set_Item(Int32, System.Object)</S>
                        <S>Void Add(System.String)</S>
                        <S>Void AddWithResize(System.String)</S>
                        <S>Int32 System.Collections.IList.Add(System.Object)</S>
                        <S>Void AddRange(System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>System.Collections.ObjectModel.ReadOnlyCollection`1[System.String] AsReadOnly()</S>
                        <S>Int32 BinarySearch(Int32, Int32, System.String, System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Int32 BinarySearch(System.String)</S>
                        <S>Int32 BinarySearch(System.String, System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Void Clear()</S>
                        <S>Boolean Contains(System.String)</S>
                        <S>Boolean System.Collections.IList.Contains(System.Object)</S>
                        <S>System.Collections.Generic.List`1[TOutput] ConvertAll[TOutput](System.Converter`2[System.String,TOutput])</S>
                        <S>Void CopyTo(System.String[])</S>
                        <S>Void System.Collections.ICollection.CopyTo(System.Array, Int32)</S>
                        <S>Void CopyTo(Int32, System.String[], Int32, Int32)</S>
                        <S>Void CopyTo(System.String[], Int32)</S>
                        <S>Int32 EnsureCapacity(Int32)</S>
                        <S>Void Grow(Int32)</S>
                        <S>Void GrowForInsertion(Int32, Int32)</S>
                        <S>Int32 GetNewCapacity(Int32)</S>
                        <S>Boolean Exists(System.Predicate`1[System.String])</S>
                        <S>System.String Find(System.Predicate`1[System.String])</S>
                        <S>System.Collections.Generic.List`1[System.String] FindAll(System.Predicate`1[System.String])</S>
                        <S>Int32 FindIndex(System.Predicate`1[System.String])</S>
                        <S>Int32 FindIndex(Int32, System.Predicate`1[System.String])</S>
                        <S>Int32 FindIndex(Int32, Int32, System.Predicate`1[System.String])</S>
                        <S>System.String FindLast(System.Predicate`1[System.String])</S>
                        <S>Int32 FindLastIndex(System.Predicate`1[System.String])</S>
                        <S>Int32 FindLastIndex(Int32, System.Predicate`1[System.String])</S>
                        <S>Int32 FindLastIndex(Int32, Int32, System.Predicate`1[System.String])</S>
                        <S>Void ForEach(System.Action`1[System.String])</S>
                        <S>Enumerator GetEnumerator()</S>
                        <S>System.Collections.Generic.IEnumerator`1[System.String] System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</S>
                        <S>System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</S>
                        <S>System.Collections.Generic.List`1[System.String] GetRange(Int32, Int32)</S>
                        <S>System.Collections.Generic.List`1[System.String] Slice(Int32, Int32)</S>
                        <S>Int32 IndexOf(System.String)</S>
                        <S>Int32 System.Collections.IList.IndexOf(System.Object)</S>
                        <S>Int32 IndexOf(System.String, Int32)</S>
                        <S>Int32 IndexOf(System.String, Int32, Int32)</S>
                        <S>Void Insert(Int32, System.String)</S>
                        <S>Void System.Collections.IList.Insert(Int32, System.Object)</S>
                        <S>Void InsertRange(Int32, System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>Int32 LastIndexOf(System.String)</S>
                        <S>Int32 LastIndexOf(System.String, Int32)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, Int32)</S>
                        <S>Boolean Remove(System.String)</S>
                        <S>Void System.Collections.IList.Remove(System.Object)</S>
                        <S>Int32 RemoveAll(System.Predicate`1[System.String])</S>
                        <S>Void RemoveAt(Int32)</S>
                        <S>Void RemoveRange(Int32, Int32)</S>
                        <S>Void Reverse()</S>
                        <S>Void Reverse(Int32, Int32)</S>
                        <S>Void Sort()</S>
                        <S>Void Sort(System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Void Sort(Int32, Int32, System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Void Sort(System.Comparison`1[System.String])</S>
                        <S>System.String[] ToArray()</S>
                        <S>Void TrimExcess()</S>
                        <S>Boolean TrueForAll(System.Predicate`1[System.String])</S>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(Int32)</S>
                        <S>Void .ctor(System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>Void .cctor()</S>
                        <S>Int32 Capacity</S>
                        <S>Int32 Count</S>
                        <S>Boolean System.Collections.IList.IsFixedSize</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly</S>
                        <S>Boolean System.Collections.IList.IsReadOnly</S>
                        <S>Boolean System.Collections.ICollection.IsSynchronized</S>
                        <S>System.Object System.Collections.ICollection.SyncRoot</S>
                        <S>System.String Item [Int32]</S>
                        <S>System.Object System.Collections.IList.Item [Int32]</S>
                        <S>System.String[] _items</S>
                        <S>Int32 _size</S>
                        <S>Int32 _version</S>
                        <S>System.String[] s_emptyArray</S>
                        <S>System.Collections.Generic.List`1+Enumerator[T]</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="551">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Int32 get_Capacity()</S>
                        <S>Void set_Capacity(Int32)</S>
                        <S>Int32 get_Count()</S>
                        <S>Boolean System.Collections.IList.get_IsFixedSize()</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly()</S>
                        <S>Boolean System.Collections.IList.get_IsReadOnly()</S>
                        <S>Boolean System.Collections.ICollection.get_IsSynchronized()</S>
                        <S>System.Object System.Collections.ICollection.get_SyncRoot()</S>
                        <S>System.String get_Item(Int32)</S>
                        <S>Void set_Item(Int32, System.String)</S>
                        <S>Boolean IsCompatibleObject(System.Object)</S>
                        <S>System.Object System.Collections.IList.get_Item(Int32)</S>
                        <S>Void System.Collections.IList.set_Item(Int32, System.Object)</S>
                        <S>Void Add(System.String)</S>
                        <S>Void AddWithResize(System.String)</S>
                        <S>Int32 System.Collections.IList.Add(System.Object)</S>
                        <S>Void AddRange(System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>System.Collections.ObjectModel.ReadOnlyCollection`1[System.String] AsReadOnly()</S>
                        <S>Int32 BinarySearch(Int32, Int32, System.String, System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Int32 BinarySearch(System.String)</S>
                        <S>Int32 BinarySearch(System.String, System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Void Clear()</S>
                        <S>Boolean Contains(System.String)</S>
                        <S>Boolean System.Collections.IList.Contains(System.Object)</S>
                        <S>System.Collections.Generic.List`1[TOutput] ConvertAll[TOutput](System.Converter`2[System.String,TOutput])</S>
                        <S>Void CopyTo(System.String[])</S>
                        <S>Void System.Collections.ICollection.CopyTo(System.Array, Int32)</S>
                        <S>Void CopyTo(Int32, System.String[], Int32, Int32)</S>
                        <S>Void CopyTo(System.String[], Int32)</S>
                        <S>Int32 EnsureCapacity(Int32)</S>
                        <S>Void Grow(Int32)</S>
                        <S>Void GrowForInsertion(Int32, Int32)</S>
                        <S>Int32 GetNewCapacity(Int32)</S>
                        <S>Boolean Exists(System.Predicate`1[System.String])</S>
                        <S>System.String Find(System.Predicate`1[System.String])</S>
                        <S>System.Collections.Generic.List`1[System.String] FindAll(System.Predicate`1[System.String])</S>
                        <S>Int32 FindIndex(System.Predicate`1[System.String])</S>
                        <S>Int32 FindIndex(Int32, System.Predicate`1[System.String])</S>
                        <S>Int32 FindIndex(Int32, Int32, System.Predicate`1[System.String])</S>
                        <S>System.String FindLast(System.Predicate`1[System.String])</S>
                        <S>Int32 FindLastIndex(System.Predicate`1[System.String])</S>
                        <S>Int32 FindLastIndex(Int32, System.Predicate`1[System.String])</S>
                        <S>Int32 FindLastIndex(Int32, Int32, System.Predicate`1[System.String])</S>
                        <S>Void ForEach(System.Action`1[System.String])</S>
                        <S>Enumerator GetEnumerator()</S>
                        <S>System.Collections.Generic.IEnumerator`1[System.String] System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</S>
                        <S>System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</S>
                        <S>System.Collections.Generic.List`1[System.String] GetRange(Int32, Int32)</S>
                        <S>System.Collections.Generic.List`1[System.String] Slice(Int32, Int32)</S>
                        <S>Int32 IndexOf(System.String)</S>
                        <S>Int32 System.Collections.IList.IndexOf(System.Object)</S>
                        <S>Int32 IndexOf(System.String, Int32)</S>
                        <S>Int32 IndexOf(System.String, Int32, Int32)</S>
                        <S>Void Insert(Int32, System.String)</S>
                        <S>Void System.Collections.IList.Insert(Int32, System.Object)</S>
                        <S>Void InsertRange(Int32, System.Collections.Generic.IEnumerable`1[System.String])</S>
                        <S>Int32 LastIndexOf(System.String)</S>
                        <S>Int32 LastIndexOf(System.String, Int32)</S>
                        <S>Int32 LastIndexOf(System.String, Int32, Int32)</S>
                        <S>Boolean Remove(System.String)</S>
                        <S>Void System.Collections.IList.Remove(System.Object)</S>
                        <S>Int32 RemoveAll(System.Predicate`1[System.String])</S>
                        <S>Void RemoveAt(Int32)</S>
                        <S>Void RemoveRange(Int32, Int32)</S>
                        <S>Void Reverse()</S>
                        <S>Void Reverse(Int32, Int32)</S>
                        <S>Void Sort()</S>
                        <S>Void Sort(System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Void Sort(Int32, Int32, System.Collections.Generic.IComparer`1[System.String])</S>
                        <S>Void Sort(System.Comparison`1[System.String])</S>
                        <S>System.String[] ToArray()</S>
                        <S>Void TrimExcess()</S>
                        <S>Boolean TrueForAll(System.Predicate`1[System.String])</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="552">
                      <TNRef RefId="10" />
                      <IE>
                        <S>System.Collections.Generic.List`1+Enumerator[T]</S>
                      </IE>
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="553">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Int32 Capacity</S>
                        <S>Int32 Count</S>
                        <S>Boolean System.Collections.IList.IsFixedSize</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly</S>
                        <S>Boolean System.Collections.IList.IsReadOnly</S>
                        <S>Boolean System.Collections.ICollection.IsSynchronized</S>
                        <S>System.Object System.Collections.ICollection.SyncRoot</S>
                        <S>System.String Item [Int32]</S>
                        <S>System.Object System.Collections.IList.Item [Int32]</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="554">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.Collections.Generic.IList`1[System.String]</S>
                        <S>System.Collections.Generic.ICollection`1[System.String]</S>
                        <S>System.Collections.Generic.IEnumerable`1[System.String]</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.Collections.IList</S>
                        <S>System.Collections.ICollection</S>
                        <S>System.Collections.Generic.IReadOnlyList`1[System.String]</S>
                        <S>System.Collections.Generic.IReadOnlyCollection`1[System.String]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Obj N="GenericTypeArguments" RefId="555">
                      <TNRef RefId="4" />
                      <LST>
                        <Ref RefId="3" />
                      </LST>
                    </Obj>
                    <S N="Attributes">Public, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">false</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <S N="TypeInitializer">Void .cctor()</S>
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="556">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.NullableContextAttribute((Byte)1)]</S>
                        <S>[System.Runtime.CompilerServices.NullableAttribute((Byte)0)]</S>
                        <S>[System.Reflection.DefaultMemberAttribute("Item")]</S>
                        <S>[System.Diagnostics.DebuggerTypeProxyAttribute(typeof(System.Collections.Generic.ICollectionDebugView`1))]</S>
                        <S>[System.Diagnostics.DebuggerDisplayAttribute("Count = {Count}")]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="557">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="558">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="559">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="560">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Obj N="ParameterType" RefId="561">
                  <TNRef RefId="3" />
                  <ToString>System.Nullable`1[System.Guid]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Nullable`1[[System.Guid, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</S>
                    <S N="AssemblyQualifiedName">System.Nullable`1[[System.Guid, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">46ad0d21-0e57-3cd7-b491-6125deebc65a</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">true</B>
                    <B N="IsGenericType">true</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">Nullable`1</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554827</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="561" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="562">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(System.Guid)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="563">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Boolean hasValue</S>
                        <S>System.Guid value</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="564">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Boolean get_HasValue()</S>
                        <S>System.Guid get_Value()</S>
                        <S>System.Guid GetValueOrDefault()</S>
                        <S>System.Guid GetValueOrDefault(System.Guid)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.Nullable`1[System.Guid] op_Implicit(System.Guid)</S>
                        <S>System.Guid op_Explicit(System.Nullable`1[System.Guid])</S>
                        <S>Void .ctor(System.Guid)</S>
                        <S>Boolean HasValue</S>
                        <S>System.Guid Value</S>
                        <S>Boolean hasValue</S>
                        <S>System.Guid value</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="565">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Boolean get_HasValue()</S>
                        <S>System.Guid get_Value()</S>
                        <S>System.Guid GetValueOrDefault()</S>
                        <S>System.Guid GetValueOrDefault(System.Guid)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.Nullable`1[System.Guid] op_Implicit(System.Guid)</S>
                        <S>System.Guid op_Explicit(System.Nullable`1[System.Guid])</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="566">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="567">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Boolean HasValue</S>
                        <S>System.Guid Value</S>
                      </LST>
                    </Obj>
                    <Ref N="ImplementedInterfaces" RefId="5" />
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Obj N="GenericTypeArguments" RefId="568">
                      <TNRef RefId="4" />
                      <LST>
                        <Ref RefId="389" />
                      </LST>
                    </Obj>
                    <S N="Attributes">Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="569">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.Versioning.NonVersionableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="570">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="571">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="572">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="573">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="574">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="575">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="576">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="577">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="578">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="579">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="580">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="581">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="582">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="583">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="584">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="585">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="586">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="587">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="588">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="589">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="590">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="591">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="592">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="593">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="594">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="595">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="596">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="597">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="598">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="599">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="600">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="601">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXOMailbox</S>
      <Obj N="Parameters" RefId="602">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Anr</S>
            <Obj N="Value" RefId="603">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Anr</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="604">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Filter</S>
            <Obj N="Value" RefId="605">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Filter</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="606">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OrganizationalUnit</S>
            <Obj N="Value" RefId="607">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OrganizationalUnit</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="608">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Properties</S>
            <Obj N="Value" RefId="609">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Properties</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="610">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PropertySets</S>
            <Obj N="Value" RefId="611">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PropertySets</S>
                <Obj N="ParameterType" RefId="612">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet[]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet[]</S>
                    <S N="AssemblyQualifiedName">Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet[], Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Exchange.Management.RestApiClient</S>
                    <G N="GUID">00000000-0000-0000-0000-000000000000</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">true</B>
                    <B N="ContainsGenericParameters">false</B>
                    <Nil N="StructLayoutAttribute" />
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">PropertySet[]</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <Obj N="BaseType" RefId="613">
                      <S>System.Array</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554432</I32>
                    <S N="Module">Microsoft.Exchange.Management.RestApiClient.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="612" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="614">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Ref N="DeclaredFields" RefId="59" />
                    <Obj N="DeclaredMembers" RefId="615">
                      <TNRef RefId="8" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="616">
                      <TNRef RefId="9" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="617">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="618">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.ICloneable</S>
                        <S>System.Collections.IList</S>
                        <S>System.Collections.ICollection</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.Collections.IStructuralComparable</S>
                        <S>System.Collections.IStructuralEquatable</S>
                        <S>System.Collections.Generic.IList`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.ICollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyList`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyCollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailbox+PropertySet]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">true</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">true</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, Serializable</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="619">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="620">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SoftDeletedMailbox</S>
            <Obj N="Value" RefId="621">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SoftDeletedMailbox</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="622">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InactiveMailboxOnly</S>
            <Obj N="Value" RefId="623">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InactiveMailboxOnly</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="624">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Archive</S>
            <Obj N="Value" RefId="625">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Archive</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="626">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeInactiveMailbox</S>
            <Obj N="Value" RefId="627">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeInactiveMailbox</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="628">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MailboxPlan</S>
            <Obj N="Value" RefId="629">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MailboxPlan</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="630">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RecipientTypeDetails</S>
            <Obj N="Value" RefId="631">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RecipientTypeDetails</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="632">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PublicFolder</S>
            <Obj N="Value" RefId="633">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PublicFolder</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="634">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupMailbox</S>
            <Obj N="Value" RefId="635">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupMailbox</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="636">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Migration</S>
            <Obj N="Value" RefId="637">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Migration</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="638">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Async</S>
            <Obj N="Value" RefId="639">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Async</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="640">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="641">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="642">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="643">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Ref N="ParameterType" RefId="561" />
                <Obj N="Aliases" RefId="644">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="645">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="646">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="647">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="648">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="649">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="650">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="651">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="652">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="653">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="654">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="655">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="656">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="657">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="658">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="659">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="660">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="661">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="662">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="663">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="664">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="665">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="666">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="667">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="668">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="669">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="670">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="671">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="672">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="673">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="674">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="675">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXOMailboxFolderPermission</S>
      <Obj N="Parameters" RefId="676">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">User</S>
            <Obj N="Value" RefId="677">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">User</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="678">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupMailbox</S>
            <Obj N="Value" RefId="679">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupMailbox</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="680">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="681">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="682">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="683">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Ref N="ParameterType" RefId="561" />
                <Obj N="Aliases" RefId="684">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="685">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="686">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="687">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="688">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="689">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="690">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="691">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="692">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="693">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="694">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="695">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="696">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="697">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="698">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="699">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="700">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="701">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="702">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="703">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="704">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="705">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="706">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="707">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="708">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="709">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="710">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="711">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="712">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="713">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXOMailboxFolderStatistics</S>
      <Obj N="Parameters" RefId="714">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Archive</S>
            <Obj N="Value" RefId="715">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Archive</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="716">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeSoftDeletedRecipients</S>
            <Obj N="Value" RefId="717">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeSoftDeletedRecipients</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="718">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeOldestAndNewestItems</S>
            <Obj N="Value" RefId="719">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeOldestAndNewestItems</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="720">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="721">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="722">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="723">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Ref N="ParameterType" RefId="561" />
                <Obj N="Aliases" RefId="724">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="725">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="726">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="727">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="728">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Folderscope</S>
            <Obj N="Value" RefId="729">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Folderscope</S>
                <Obj N="ParameterType" RefId="730">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType</S>
                    <S N="AssemblyQualifiedName">Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType, Microsoft.Exchange.Management.AdminApiProvider, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Exchange.Management.AdminApiProvider</S>
                    <G N="GUID">a79d3a53-31f9-3409-bb9d-0e5736e6a701</G>
                    <B N="IsEnum">true</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">ElcFolderType</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Exchange.Management.AdminApiProvider, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="BaseType">System.Enum</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">true</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554583</I32>
                    <S N="Module">Microsoft.Exchange.Management.AdminApiProvider.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="730" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Ref N="DeclaredConstructors" RefId="20" />
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="731">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int64 value__</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Calendar</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Contacts</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType DeletedItems</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Drafts</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Inbox</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType JunkEmail</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Journal</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Notes</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Outbox</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType SentItems</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Tasks</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType All</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType ManagedCustomFolder</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType RssSubscriptions</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType SyncIssues</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType ConversationHistory</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Personal</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType RecoverableItems</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType NonIpmRoot</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType LegacyArchiveJournals</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Clutter</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Archive</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="732">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Int64 value__</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Calendar</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Contacts</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType DeletedItems</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Drafts</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Inbox</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType JunkEmail</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Journal</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Notes</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Outbox</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType SentItems</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Tasks</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType All</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType ManagedCustomFolder</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType RssSubscriptions</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType SyncIssues</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType ConversationHistory</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Personal</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType RecoverableItems</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType NonIpmRoot</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType LegacyArchiveJournals</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Clutter</S>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.ElcFolderType Archive</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredMethods" RefId="23" />
                    <Obj N="DeclaredNestedTypes" RefId="733">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="734">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.IComparable</S>
                        <S>System.ISpanFormattable</S>
                        <S>System.IFormattable</S>
                        <S>System.IConvertible</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="735">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[Microsoft.OData.Client.OriginalNameAttribute("ElcFolderType")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="736">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="737">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="738">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="739">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="740">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="741">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="742">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="743">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="744">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="745">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="746">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="747">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="748">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="749">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="750">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="751">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="752">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="753">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="754">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="755">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="756">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="757">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="758">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="759">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="760">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="761">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXOMailboxPermission</S>
      <Obj N="Parameters" RefId="762">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">User</S>
            <Obj N="Value" RefId="763">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">User</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="764">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Owner</S>
            <Obj N="Value" RefId="765">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Owner</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="766">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SoftDeletedMailbox</S>
            <Obj N="Value" RefId="767">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SoftDeletedMailbox</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="768">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="769">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="770">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="771">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Ref N="ParameterType" RefId="561" />
                <Obj N="Aliases" RefId="772">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="773">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="774">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="775">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="776">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="777">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="778">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="779">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="780">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="781">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="782">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="783">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="784">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="785">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="786">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="787">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="788">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="789">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="790">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="791">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="792">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="793">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="794">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="795">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="796">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="797">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="798">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="799">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="800">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="801">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="802">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="803">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXOMailboxStatistics</S>
      <Obj N="Parameters" RefId="804">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">IncludeMoveHistory</S>
            <Obj N="Value" RefId="805">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeMoveHistory</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="806">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeMoveReport</S>
            <Obj N="Value" RefId="807">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeMoveReport</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="808">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExchangeGuid</S>
            <Obj N="Value" RefId="809">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExchangeGuid</S>
                <Ref N="ParameterType" RefId="389" />
                <Obj N="Aliases" RefId="810">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DatabaseGuid</S>
            <Obj N="Value" RefId="811">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DatabaseGuid</S>
                <Ref N="ParameterType" RefId="389" />
                <Obj N="Aliases" RefId="812">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Archive</S>
            <Obj N="Value" RefId="813">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Archive</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="814">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeSoftDeletedRecipients</S>
            <Obj N="Value" RefId="815">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeSoftDeletedRecipients</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="816">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Properties</S>
            <Obj N="Value" RefId="817">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Properties</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="818">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PropertySets</S>
            <Obj N="Value" RefId="819">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PropertySets</S>
                <Obj N="ParameterType" RefId="820">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet[]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet[]</S>
                    <S N="AssemblyQualifiedName">Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet[], Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Exchange.Management.RestApiClient</S>
                    <G N="GUID">00000000-0000-0000-0000-000000000000</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">true</B>
                    <B N="ContainsGenericParameters">false</B>
                    <Nil N="StructLayoutAttribute" />
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">PropertySet[]</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <Obj N="BaseType" RefId="821">
                      <S>System.Array</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554432</I32>
                    <S N="Module">Microsoft.Exchange.Management.RestApiClient.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="820" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="822">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Ref N="DeclaredFields" RefId="59" />
                    <Obj N="DeclaredMembers" RefId="823">
                      <TNRef RefId="8" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="824">
                      <TNRef RefId="9" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="825">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="826">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.ICloneable</S>
                        <S>System.Collections.IList</S>
                        <S>System.Collections.ICollection</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.Collections.IStructuralComparable</S>
                        <S>System.Collections.IStructuralEquatable</S>
                        <S>System.Collections.Generic.IList`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet]</S>
                        <S>System.Collections.Generic.ICollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet]</S>
                        <S>System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyList`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyCollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoMailboxStatistics+PropertySet]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">true</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">true</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, Serializable</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="827">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="828">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="829">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="830">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="831">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="832">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="833">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="834">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="835">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="836">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="837">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="838">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="839">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="840">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="841">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="842">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="843">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="844">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="845">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="846">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="847">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="848">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="849">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="850">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="851">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="852">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="853">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="854">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="855">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="856">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="857">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="858">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="859">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXOMobileDeviceStatistics</S>
      <Obj N="Parameters" RefId="860">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Mailbox</S>
            <Obj N="Value" RefId="861">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Mailbox</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="862">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ActiveSync</S>
            <Obj N="Value" RefId="863">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ActiveSync</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="864">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OWAforDevices</S>
            <Obj N="Value" RefId="865">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OWAforDevices</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="866">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RestApi</S>
            <Obj N="Value" RefId="867">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RestApi</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="868">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UniversalOutlook</S>
            <Obj N="Value" RefId="869">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UniversalOutlook</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="870">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowRecoveryPassword</S>
            <Obj N="Value" RefId="871">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowRecoveryPassword</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="872">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NotificationEmailAddresses</S>
            <Obj N="Value" RefId="873">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NotificationEmailAddresses</S>
                <Ref N="ParameterType" RefId="546" />
                <Obj N="Aliases" RefId="874">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GetMailboxLog</S>
            <Obj N="Value" RefId="875">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GetMailboxLog</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="876">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="877">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="878">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="879">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Ref N="ParameterType" RefId="561" />
                <Obj N="Aliases" RefId="880">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="881">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="882">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="883">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="884">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="885">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="886">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="887">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="888">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="889">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="890">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="891">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="892">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="893">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="894">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="895">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="896">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="897">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="898">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="899">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="900">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="901">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="902">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="903">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="904">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="905">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="906">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="907">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="908">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="909">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXORecipient</S>
      <Obj N="Parameters" RefId="910">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Anr</S>
            <Obj N="Value" RefId="911">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Anr</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="912">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Filter</S>
            <Obj N="Value" RefId="913">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Filter</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="914">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OrganizationalUnit</S>
            <Obj N="Value" RefId="915">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OrganizationalUnit</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="916">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Properties</S>
            <Obj N="Value" RefId="917">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Properties</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="918">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PropertySets</S>
            <Obj N="Value" RefId="919">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PropertySets</S>
                <Obj N="ParameterType" RefId="920">
                  <TNRef RefId="3" />
                  <ToString>Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet[]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet[]</S>
                    <S N="AssemblyQualifiedName">Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet[], Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <S N="Namespace">Microsoft.Exchange.Management.RestApiClient</S>
                    <G N="GUID">00000000-0000-0000-0000-000000000000</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">false</B>
                    <B N="IsGenericType">false</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">true</B>
                    <B N="ContainsGenericParameters">false</B>
                    <Nil N="StructLayoutAttribute" />
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">PropertySet[]</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">Microsoft.Exchange.Management.RestApiClient, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</S>
                    <Obj N="BaseType" RefId="921">
                      <S>System.Array</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554432</I32>
                    <S N="Module">Microsoft.Exchange.Management.RestApiClient.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="920" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="922">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Ref N="DeclaredFields" RefId="59" />
                    <Obj N="DeclaredMembers" RefId="923">
                      <TNRef RefId="8" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                        <S>Void .ctor(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="924">
                      <TNRef RefId="9" />
                      <LST>
                        <S>PropertySet Get(Int32)</S>
                        <S>Void Set(Int32, PropertySet)</S>
                        <S>PropertySet&amp; Address(Int32)</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="925">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Ref N="DeclaredProperties" RefId="25" />
                    <Obj N="ImplementedInterfaces" RefId="926">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.ICloneable</S>
                        <S>System.Collections.IList</S>
                        <S>System.Collections.ICollection</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.Collections.IStructuralComparable</S>
                        <S>System.Collections.IStructuralEquatable</S>
                        <S>System.Collections.Generic.IList`1[Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet]</S>
                        <S>System.Collections.Generic.ICollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet]</S>
                        <S>System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyList`1[Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet]</S>
                        <S>System.Collections.Generic.IReadOnlyCollection`1[Microsoft.Exchange.Management.RestApiClient.GetExoRecipient+PropertySet]</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">true</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">true</B>
                    <Ref N="GenericTypeArguments" RefId="5" />
                    <S N="Attributes">Public, Sealed, Serializable</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="927">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="928">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeSoftDeletedRecipients</S>
            <Obj N="Value" RefId="929">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeSoftDeletedRecipients</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="930">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RecipientType</S>
            <Obj N="Value" RefId="931">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RecipientType</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="932">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RecipientTypeDetails</S>
            <Obj N="Value" RefId="933">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RecipientTypeDetails</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="934">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RecipientPreviewFilter</S>
            <Obj N="Value" RefId="935">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RecipientPreviewFilter</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="936">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="937">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="938">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="939">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Ref N="ParameterType" RefId="561" />
                <Obj N="Aliases" RefId="940">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="941">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="942">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="943">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="944">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="945">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="946">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="947">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="948">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="949">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="950">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="951">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="952">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="953">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="954">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="955">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="956">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="957">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="958">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="959">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="960">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="961">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="962">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="963">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="964">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="965">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="966">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="967">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="968">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="969">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="970">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="971">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-EXORecipientPermission</S>
      <Obj N="Parameters" RefId="972">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Trustee</S>
            <Obj N="Value" RefId="973">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Trustee</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="974">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AccessRights</S>
            <Obj N="Value" RefId="975">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AccessRights</S>
                <Obj N="ParameterType" RefId="976">
                  <TNRef RefId="3" />
                  <ToString>System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Collections.Generic.HashSet`1[[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight, Microsoft.Exchange.Management.AdminApiProvider, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</S>
                    <S N="AssemblyQualifiedName">System.Collections.Generic.HashSet`1[[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight, Microsoft.Exchange.Management.AdminApiProvider, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System.Collections.Generic</S>
                    <G N="GUID">f2b74fb5-bd5a-3210-8659-c6328c0b2523</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">true</B>
                    <B N="IsGenericType">true</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">HashSet`1</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <Obj N="BaseType" RefId="977">
                      <S>System.Object</S>
                    </Obj>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33557041</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="976" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="978">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(Int32)</S>
                        <S>Void .ctor(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(Int32, System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="979">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Int32[] _buckets</S>
                        <S>Entry[] _entries</S>
                        <S>UInt64 _fastModMultiplier</S>
                        <S>Int32 _count</S>
                        <S>Int32 _freeList</S>
                        <S>Int32 _freeCount</S>
                        <S>Int32 _version</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] _comparer</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="980">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Void ConstructFrom(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void System.Collections.Generic.ICollection&lt;T&gt;.Add(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Void Clear()</S>
                        <S>Boolean Contains(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Int32 FindItemIndex(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Int32&amp; GetBucketRef(Int32)</S>
                        <S>Boolean Remove(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Int32 get_Count()</S>
                        <S>Int32 get_Capacity()</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly()</S>
                        <S>AlternateLookup`1 GetAlternateLookup[TAlternate]()</S>
                        <S>Boolean TryGetAlternateLookup[TAlternate](AlternateLookup`1 ByRef)</S>
                        <S>Enumerator GetEnumerator()</S>
                        <S>System.Collections.Generic.IEnumerator`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</S>
                        <S>System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</S>
                        <S>Void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>Void OnDeserialization(System.Object)</S>
                        <S>Boolean Add(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Boolean TryGetValue(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight, Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight ByRef)</S>
                        <S>Void UnionWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void IntersectWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void ExceptWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void SymmetricExceptWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsSubsetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsProperSubsetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsSupersetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsProperSupersetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean Overlaps(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean SetEquals(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void CopyTo(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight[])</S>
                        <S>Void CopyTo(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight[], Int32)</S>
                        <S>Void CopyTo(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight[], Int32, Int32)</S>
                        <S>Int32 RemoveWhere(System.Predicate`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] get_Comparer()</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] get_EffectiveComparer()</S>
                        <S>Int32 EnsureCapacity(Int32)</S>
                        <S>Void Resize()</S>
                        <S>Void Resize(Int32, Boolean)</S>
                        <S>Void TrimExcess()</S>
                        <S>Void TrimExcess(Int32)</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]] CreateSetComparer()</S>
                        <S>Int32 Initialize(Int32)</S>
                        <S>Boolean AddIfNotPresent(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight, Int32 ByRef)</S>
                        <S>Boolean IsSubsetOfHashSetWithSameComparer(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void IntersectWithHashSetWithSameComparer(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void IntersectWithEnumerable(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void SymmetricExceptWithUniqueHashSet(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void SymmetricExceptWithEnumerable(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>System.ValueTuple`2[System.Int32,System.Int32] CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], Boolean)</S>
                        <S>Boolean EqualityComparersAreEqual(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean EffectiveEqualityComparersAreEqual(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor()</S>
                        <S>Void .ctor(System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(Int32)</S>
                        <S>Void .ctor(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(Int32, System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void .ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>Int32 Count</S>
                        <S>Int32 Capacity</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] Comparer</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] EffectiveComparer</S>
                        <S>Int32[] _buckets</S>
                        <S>Entry[] _entries</S>
                        <S>UInt64 _fastModMultiplier</S>
                        <S>Int32 _count</S>
                        <S>Int32 _freeList</S>
                        <S>Int32 _freeCount</S>
                        <S>Int32 _version</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] _comparer</S>
                        <S>System.Collections.Generic.HashSet`1+AlternateLookup`1[T,TAlternate]</S>
                        <S>System.Collections.Generic.HashSet`1+Entry[T]</S>
                        <S>System.Collections.Generic.HashSet`1+Enumerator[T]</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="981">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Void ConstructFrom(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void System.Collections.Generic.ICollection&lt;T&gt;.Add(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Void Clear()</S>
                        <S>Boolean Contains(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Int32 FindItemIndex(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Int32&amp; GetBucketRef(Int32)</S>
                        <S>Boolean Remove(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Int32 get_Count()</S>
                        <S>Int32 get_Capacity()</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly()</S>
                        <S>AlternateLookup`1 GetAlternateLookup[TAlternate]()</S>
                        <S>Boolean TryGetAlternateLookup[TAlternate](AlternateLookup`1 ByRef)</S>
                        <S>Enumerator GetEnumerator()</S>
                        <S>System.Collections.Generic.IEnumerator`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</S>
                        <S>System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</S>
                        <S>Void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</S>
                        <S>Void OnDeserialization(System.Object)</S>
                        <S>Boolean Add(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight)</S>
                        <S>Boolean TryGetValue(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight, Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight ByRef)</S>
                        <S>Void UnionWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void IntersectWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void ExceptWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void SymmetricExceptWith(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsSubsetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsProperSubsetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsSupersetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean IsProperSupersetOf(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean Overlaps(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean SetEquals(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void CopyTo(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight[])</S>
                        <S>Void CopyTo(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight[], Int32)</S>
                        <S>Void CopyTo(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight[], Int32, Int32)</S>
                        <S>Int32 RemoveWhere(System.Predicate`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] get_Comparer()</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] get_EffectiveComparer()</S>
                        <S>Int32 EnsureCapacity(Int32)</S>
                        <S>Void Resize()</S>
                        <S>Void Resize(Int32, Boolean)</S>
                        <S>Void TrimExcess()</S>
                        <S>Void TrimExcess(Int32)</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]] CreateSetComparer()</S>
                        <S>Int32 Initialize(Int32)</S>
                        <S>Boolean AddIfNotPresent(Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight, Int32 ByRef)</S>
                        <S>Boolean IsSubsetOfHashSetWithSameComparer(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void IntersectWithHashSetWithSameComparer(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void IntersectWithEnumerable(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void SymmetricExceptWithUniqueHashSet(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Void SymmetricExceptWithEnumerable(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>System.ValueTuple`2[System.Int32,System.Int32] CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], Boolean)</S>
                        <S>Boolean EqualityComparersAreEqual(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                        <S>Boolean EffectiveEqualityComparersAreEqual(System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight], System.Collections.Generic.HashSet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight])</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="982">
                      <TNRef RefId="10" />
                      <IE>
                        <S>System.Collections.Generic.HashSet`1+AlternateLookup`1[T,TAlternate]</S>
                        <S>System.Collections.Generic.HashSet`1+Entry[T]</S>
                        <S>System.Collections.Generic.HashSet`1+Enumerator[T]</S>
                      </IE>
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="983">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Int32 Count</S>
                        <S>Int32 Capacity</S>
                        <S>Boolean System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] Comparer</S>
                        <S>System.Collections.Generic.IEqualityComparer`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight] EffectiveComparer</S>
                      </LST>
                    </Obj>
                    <Obj N="ImplementedInterfaces" RefId="984">
                      <TNRef RefId="4" />
                      <LST>
                        <S>System.Collections.Generic.ICollection`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]</S>
                        <S>System.Collections.Generic.IEnumerable`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]</S>
                        <S>System.Collections.IEnumerable</S>
                        <S>System.Collections.Generic.ISet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]</S>
                        <S>System.Collections.Generic.IReadOnlyCollection`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]</S>
                        <S>System.Collections.Generic.IReadOnlySet`1[Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight]</S>
                        <S>System.Runtime.Serialization.ISerializable</S>
                        <S>System.Runtime.Serialization.IDeserializationCallback</S>
                      </LST>
                    </Obj>
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Obj N="GenericTypeArguments" RefId="985">
                      <TNRef RefId="4" />
                      <LST>
                        <S>Microsoft.Exchange.Management.AdminApiProvider.RecipientAccessRight</S>
                      </LST>
                    </Obj>
                    <S N="Attributes">Public, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">false</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">true</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">true</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">false</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">false</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="986">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.NullableContextAttribute((Byte)1)]</S>
                        <S>[System.Runtime.CompilerServices.NullableAttribute((Byte)0)]</S>
                        <S>[System.Diagnostics.DebuggerTypeProxyAttribute(typeof(System.Collections.Generic.ICollectionDebugView`1))]</S>
                        <S>[System.Diagnostics.DebuggerDisplayAttribute("Count = {Count}")]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="987">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="988">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="989">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExternalDirectoryObjectId</S>
            <Obj N="Value" RefId="990">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExternalDirectoryObjectId</S>
                <Ref N="ParameterType" RefId="561" />
                <Obj N="Aliases" RefId="991">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserPrincipalName</S>
            <Obj N="Value" RefId="992">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserPrincipalName</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="993">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PrimarySmtpAddress</S>
            <Obj N="Value" RefId="994">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrimarySmtpAddress</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="995">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="996">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="997">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="998">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="999">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1000">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1001">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1002">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1003">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1004">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1005">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1006">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1007">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1008">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1009">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1010">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1011">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1012">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1013">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1014">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1015">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1016">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1017">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1018">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1019">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1020">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1021">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1022">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-MyAnalyticsFeatureConfig</S>
      <Obj N="Parameters" RefId="1023">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="1024">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1025">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1026">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1027">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1028">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1029">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1030">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1031">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1032">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1033">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1034">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1035">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1036">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1037">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1038">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1039">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1040">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1041">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1042">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1043">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1044">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1045">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1046">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1047">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1048">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1049">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1050">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1051">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1052">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-UserBriefingConfig</S>
      <Obj N="Parameters" RefId="1053">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="1054">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1055">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1056">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1057">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1058">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1059">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1060">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1061">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1062">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1063">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1064">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1065">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1066">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1067">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1068">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1069">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1070">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1071">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1072">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1073">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1074">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1075">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1076">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1077">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1078">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1079">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1080">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1081">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1082">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-VivaInsightsSettings</S>
      <Obj N="Parameters" RefId="1083">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Feature</S>
            <Obj N="Value" RefId="1084">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Feature</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1085">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="1086">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1087">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1088">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1089">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1090">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1091">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1092">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1093">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1094">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1095">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1096">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1097">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1098">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1099">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1100">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1101">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1102">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1103">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1104">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1105">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1106">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1107">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1108">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1109">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1110">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1111">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1112">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1113">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1114">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-VivaModuleFeature</S>
      <Obj N="Parameters" RefId="1115">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ModuleId</S>
            <Obj N="Value" RefId="1116">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1117">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FeatureId</S>
            <Obj N="Value" RefId="1118">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FeatureId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1119">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1120">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1121">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1122">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1123">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1124">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1125">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1126">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1127">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1128">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1129">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1130">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1131">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1132">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1133">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1134">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1135">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1136">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1137">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1138">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1139">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1140">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1141">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1142">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1143">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1144">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1145">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1146">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-VivaModuleFeatureEnablement</S>
      <Obj N="Parameters" RefId="1147">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ModuleId</S>
            <Obj N="Value" RefId="1148">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1149">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FeatureId</S>
            <Obj N="Value" RefId="1150">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FeatureId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1151">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="1152">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1153">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1154">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1155">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1156">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1157">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1158">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1159">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1160">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1161">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1162">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1163">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1164">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1165">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1166">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1167">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1168">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1169">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1170">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1171">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1172">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1173">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1174">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1175">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1176">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1177">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1178">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1179">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1180">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-VivaModuleFeaturePolicy</S>
      <Obj N="Parameters" RefId="1181">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ModuleId</S>
            <Obj N="Value" RefId="1182">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1183">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FeatureId</S>
            <Obj N="Value" RefId="1184">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FeatureId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1185">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PolicyId</S>
            <Obj N="Value" RefId="1186">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PolicyId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1187">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1188">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1189">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1190">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1191">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1192">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1193">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1194">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1195">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1196">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1197">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1198">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1199">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1200">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1201">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1202">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1203">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1204">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1205">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1206">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1207">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1208">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1209">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1210">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1211">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1212">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1213">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1214">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Get-VivaOrgInsightsDelegatedRole</S>
      <Obj N="Parameters" RefId="1215">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Delegator</S>
            <Obj N="Value" RefId="1216">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Delegator</S>
                <Ref N="ParameterType" RefId="389" />
                <Obj N="Aliases" RefId="1217">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1218">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1219">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1220">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1221">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1222">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1223">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1224">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1225">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1226">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1227">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1228">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1229">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1230">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1231">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1232">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1233">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1234">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1235">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1236">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1237">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1238">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1239">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1240">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1241">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1242">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1243">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1244">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Remove-VivaModuleFeaturePolicy</S>
      <Obj N="Parameters" RefId="1245">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ModuleId</S>
            <Obj N="Value" RefId="1246">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1247">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FeatureId</S>
            <Obj N="Value" RefId="1248">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FeatureId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1249">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PolicyId</S>
            <Obj N="Value" RefId="1250">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PolicyId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1251">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1252">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1253">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1254">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1255">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1256">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1257">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1258">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1259">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1260">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1261">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1262">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1263">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1264">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1265">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1266">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1267">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1268">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1269">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1270">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1271">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1272">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1273">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1274">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1275">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1276">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1277">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WhatIf</S>
            <Obj N="Value" RefId="1278">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WhatIf</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1279">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wi</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Confirm</S>
            <Obj N="Value" RefId="1280">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Confirm</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1281">
                  <TNRef RefId="13" />
                  <LST>
                    <S>cf</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1282">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Remove-VivaOrgInsightsDelegatedRole</S>
      <Obj N="Parameters" RefId="1283">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Delegate</S>
            <Obj N="Value" RefId="1284">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Delegate</S>
                <Ref N="ParameterType" RefId="389" />
                <Obj N="Aliases" RefId="1285">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Delegator</S>
            <Obj N="Value" RefId="1286">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Delegator</S>
                <Ref N="ParameterType" RefId="389" />
                <Obj N="Aliases" RefId="1287">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1288">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1289">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1290">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1291">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1292">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1293">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1294">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1295">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1296">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1297">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1298">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1299">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1300">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1301">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1302">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1303">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1304">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1305">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1306">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1307">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1308">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1309">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1310">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1311">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1312">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1313">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1314">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Set-DefaultTenantBriefingConfig</S>
      <Obj N="Parameters" RefId="1315">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">IsEnabledByDefault</S>
            <Obj N="Value" RefId="1316">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsEnabledByDefault</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1317">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1318">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1319">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1320">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1321">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1322">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1323">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1324">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1325">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1326">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1327">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1328">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1329">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1330">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1331">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1332">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1333">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1334">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1335">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1336">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1337">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1338">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1339">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1340">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1341">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1342">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1343">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1344">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Set-DefaultTenantMyAnalyticsFeatureConfig</S>
      <Obj N="Parameters" RefId="1345">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Feature</S>
            <Obj N="Value" RefId="1346">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Feature</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1347">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsEnabled</S>
            <Obj N="Value" RefId="1348">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsEnabled</S>
                <Ref N="ParameterType" RefId="329" />
                <Obj N="Aliases" RefId="1349">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SamplingRate</S>
            <Obj N="Value" RefId="1350">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SamplingRate</S>
                <Obj N="ParameterType" RefId="1351">
                  <TNRef RefId="3" />
                  <ToString>System.Nullable`1[System.Double]</ToString>
                  <Props>
                    <B N="IsCollectible">false</B>
                    <S N="FullName">System.Nullable`1[[System.Double, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</S>
                    <S N="AssemblyQualifiedName">System.Nullable`1[[System.Double, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="Namespace">System</S>
                    <G N="GUID">46ad0d21-0e57-3cd7-b491-6125deebc65a</G>
                    <B N="IsEnum">false</B>
                    <B N="IsByRefLike">false</B>
                    <B N="IsConstructedGenericType">true</B>
                    <B N="IsGenericType">true</B>
                    <B N="IsGenericTypeDefinition">false</B>
                    <B N="IsSZArray">false</B>
                    <B N="ContainsGenericParameters">false</B>
                    <S N="StructLayoutAttribute">System.Runtime.InteropServices.StructLayoutAttribute</S>
                    <B N="IsFunctionPointer">false</B>
                    <B N="IsUnmanagedFunctionPointer">false</B>
                    <S N="Name">Nullable`1</S>
                    <Nil N="DeclaringType" />
                    <S N="Assembly">System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</S>
                    <S N="BaseType">System.ValueType</S>
                    <B N="IsGenericParameter">false</B>
                    <B N="IsTypeDefinition">false</B>
                    <B N="IsSecurityCritical">true</B>
                    <B N="IsSecuritySafeCritical">false</B>
                    <B N="IsSecurityTransparent">false</B>
                    <S N="MemberType">TypeInfo</S>
                    <I32 N="MetadataToken">33554827</I32>
                    <S N="Module">System.Private.CoreLib.dll</S>
                    <Nil N="ReflectedType" />
                    <S N="TypeHandle">System.RuntimeTypeHandle</S>
                    <Ref N="UnderlyingSystemType" RefId="1351" />
                    <Ref N="GenericTypeParameters" RefId="5" />
                    <Obj N="DeclaredConstructors" RefId="1352">
                      <TNRef RefId="5" />
                      <LST>
                        <S>Void .ctor(Double)</S>
                      </LST>
                    </Obj>
                    <Ref N="DeclaredEvents" RefId="7" />
                    <Obj N="DeclaredFields" RefId="1353">
                      <TNRef RefId="7" />
                      <LST>
                        <S>Boolean hasValue</S>
                        <S>Double value</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMembers" RefId="1354">
                      <TNRef RefId="8" />
                      <LST>
                        <S>Boolean get_HasValue()</S>
                        <S>Double get_Value()</S>
                        <S>Double GetValueOrDefault()</S>
                        <S>Double GetValueOrDefault(Double)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.Nullable`1[System.Double] op_Implicit(Double)</S>
                        <S>Double op_Explicit(System.Nullable`1[System.Double])</S>
                        <S>Void .ctor(Double)</S>
                        <S>Boolean HasValue</S>
                        <S>Double Value</S>
                        <S>Boolean hasValue</S>
                        <S>Double value</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredMethods" RefId="1355">
                      <TNRef RefId="9" />
                      <LST>
                        <S>Boolean get_HasValue()</S>
                        <S>Double get_Value()</S>
                        <S>Double GetValueOrDefault()</S>
                        <S>Double GetValueOrDefault(Double)</S>
                        <S>Boolean Equals(System.Object)</S>
                        <S>Int32 GetHashCode()</S>
                        <S>System.String ToString()</S>
                        <S>System.Nullable`1[System.Double] op_Implicit(Double)</S>
                        <S>Double op_Explicit(System.Nullable`1[System.Double])</S>
                      </LST>
                    </Obj>
                    <Obj N="DeclaredNestedTypes" RefId="1356">
                      <TNRef RefId="10" />
                      <IE />
                    </Obj>
                    <Obj N="DeclaredProperties" RefId="1357">
                      <TNRef RefId="11" />
                      <LST>
                        <S>Boolean HasValue</S>
                        <S>Double Value</S>
                      </LST>
                    </Obj>
                    <Ref N="ImplementedInterfaces" RefId="5" />
                    <B N="IsNested">false</B>
                    <B N="IsArray">false</B>
                    <B N="IsByRef">false</B>
                    <B N="IsPointer">false</B>
                    <B N="IsGenericTypeParameter">false</B>
                    <B N="IsGenericMethodParameter">false</B>
                    <B N="IsVariableBoundArray">false</B>
                    <B N="HasElementType">false</B>
                    <Obj N="GenericTypeArguments" RefId="1358">
                      <TNRef RefId="4" />
                      <LST>
                        <Obj RefId="1359">
                          <S>System.Double</S>
                        </Obj>
                      </LST>
                    </Obj>
                    <S N="Attributes">Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit</S>
                    <B N="IsAbstract">false</B>
                    <B N="IsImport">false</B>
                    <B N="IsSealed">true</B>
                    <B N="IsSpecialName">false</B>
                    <B N="IsClass">false</B>
                    <B N="IsNestedAssembly">false</B>
                    <B N="IsNestedFamANDAssem">false</B>
                    <B N="IsNestedFamily">false</B>
                    <B N="IsNestedFamORAssem">false</B>
                    <B N="IsNestedPrivate">false</B>
                    <B N="IsNestedPublic">false</B>
                    <B N="IsNotPublic">false</B>
                    <B N="IsPublic">true</B>
                    <B N="IsAutoLayout">false</B>
                    <B N="IsExplicitLayout">false</B>
                    <B N="IsLayoutSequential">true</B>
                    <B N="IsAnsiClass">true</B>
                    <B N="IsAutoClass">false</B>
                    <B N="IsUnicodeClass">false</B>
                    <B N="IsCOMObject">false</B>
                    <B N="IsContextful">false</B>
                    <B N="IsMarshalByRef">false</B>
                    <B N="IsPrimitive">false</B>
                    <B N="IsValueType">true</B>
                    <B N="IsSignatureType">false</B>
                    <Nil N="TypeInitializer" />
                    <B N="IsSerializable">true</B>
                    <B N="IsVisible">true</B>
                    <Obj N="CustomAttributes" RefId="1360">
                      <TNRef RefId="12" />
                      <LST>
                        <S>[System.SerializableAttribute()]</S>
                        <S>[System.Runtime.Versioning.NonVersionableAttribute()]</S>
                        <S>[System.Runtime.CompilerServices.TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</S>
                      </LST>
                    </Obj>
                  </Props>
                </Obj>
                <Obj N="Aliases" RefId="1361">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1362">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1363">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1364">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1365">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1366">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1367">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1368">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1369">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1370">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1371">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1372">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1373">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1374">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1375">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1376">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1377">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1378">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1379">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1380">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1381">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1382">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1383">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1384">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1385">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1386">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1387">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1388">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Set-MyAnalyticsFeatureConfig</S>
      <Obj N="Parameters" RefId="1389">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">PrivacyMode</S>
            <Obj N="Value" RefId="1390">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PrivacyMode</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1391">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Feature</S>
            <Obj N="Value" RefId="1392">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Feature</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1393">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsEnabled</S>
            <Obj N="Value" RefId="1394">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsEnabled</S>
                <Ref N="ParameterType" RefId="329" />
                <Obj N="Aliases" RefId="1395">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="1396">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1397">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1398">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1399">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1400">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1401">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1402">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1403">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1404">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1405">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1406">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1407">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1408">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1409">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1410">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1411">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1412">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1413">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1414">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1415">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1416">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1417">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1418">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1419">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1420">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1421">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1422">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1423">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1424">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Set-UserBriefingConfig</S>
      <Obj N="Parameters" RefId="1425">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Enabled</S>
            <Obj N="Value" RefId="1426">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Enabled</S>
                <Ref N="ParameterType" RefId="173" />
                <Obj N="Aliases" RefId="1427">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="1428">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1429">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1430">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1431">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1432">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1433">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1434">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1435">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1436">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1437">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1438">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1439">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1440">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1441">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1442">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1443">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1444">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1445">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1446">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1447">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1448">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1449">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1450">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1451">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1452">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1453">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1454">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1455">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1456">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Set-VivaInsightsSettings</S>
      <Obj N="Parameters" RefId="1457">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">Enabled</S>
            <Obj N="Value" RefId="1458">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Enabled</S>
                <Ref N="ParameterType" RefId="173" />
                <Obj N="Aliases" RefId="1459">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Feature</S>
            <Obj N="Value" RefId="1460">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Feature</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1461">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Identity</S>
            <Obj N="Value" RefId="1462">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Identity</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1463">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1464">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1465">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1466">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1467">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1468">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1469">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1470">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1471">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1472">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1473">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1474">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1475">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1476">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1477">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1478">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1479">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1480">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1481">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1482">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1483">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1484">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1485">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1486">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1487">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1488">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1489">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
  <Obj RefId="1490">
    <TNRef RefId="15" />
    <MS>
      <S N="Name">Update-VivaModuleFeaturePolicy</S>
      <Obj N="Parameters" RefId="1491">
        <TNRef RefId="1" />
        <DCT>
          <En>
            <S N="Key">ModuleId</S>
            <Obj N="Value" RefId="1492">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1493">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FeatureId</S>
            <Obj N="Value" RefId="1494">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FeatureId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1495">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PolicyId</S>
            <Obj N="Value" RefId="1496">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PolicyId</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1497">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="1498">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1499">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsFeatureEnabled</S>
            <Obj N="Value" RefId="1500">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsFeatureEnabled</S>
                <Ref N="ParameterType" RefId="329" />
                <Obj N="Aliases" RefId="1501">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsUserControlEnabled</S>
            <Obj N="Value" RefId="1502">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsUserControlEnabled</S>
                <Ref N="ParameterType" RefId="329" />
                <Obj N="Aliases" RefId="1503">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsUserOptedInByDefault</S>
            <Obj N="Value" RefId="1504">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsUserOptedInByDefault</S>
                <Ref N="ParameterType" RefId="329" />
                <Obj N="Aliases" RefId="1505">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupIds</S>
            <Obj N="Value" RefId="1506">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupIds</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="1507">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UserIds</S>
            <Obj N="Value" RefId="1508">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UserIds</S>
                <Ref N="ParameterType" RefId="56" />
                <Obj N="Aliases" RefId="1509">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Everyone</S>
            <Obj N="Value" RefId="1510">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Everyone</S>
                <Ref N="ParameterType" RefId="329" />
                <Obj N="Aliases" RefId="1511">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResultSize</S>
            <Obj N="Value" RefId="1512">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResultSize</S>
                <Ref N="ParameterType" RefId="348" />
                <Obj N="Aliases" RefId="1513">
                  <TNRef RefId="13" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1514">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1515">
                  <TNRef RefId="13" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1516">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1517">
                  <TNRef RefId="13" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1518">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1519">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1520">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1521">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1522">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1523">
                  <TNRef RefId="13" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ProgressAction</S>
            <Obj N="Value" RefId="1524">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ProgressAction</S>
                <Ref N="ParameterType" RefId="96" />
                <Obj N="Aliases" RefId="1525">
                  <TNRef RefId="13" />
                  <LST>
                    <S>proga</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1526">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1527">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1528">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1529">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1530">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1531">
                  <TNRef RefId="13" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1532">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1533">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1534">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <Ref N="ParameterType" RefId="117" />
                <Obj N="Aliases" RefId="1535">
                  <TNRef RefId="13" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1536">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <Ref N="ParameterType" RefId="3" />
                <Obj N="Aliases" RefId="1537">
                  <TNRef RefId="13" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WhatIf</S>
            <Obj N="Value" RefId="1538">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WhatIf</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1539">
                  <TNRef RefId="13" />
                  <LST>
                    <S>wi</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Confirm</S>
            <Obj N="Value" RefId="1540">
              <TNRef RefId="2" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Confirm</S>
                <Ref N="ParameterType" RefId="40" />
                <Obj N="Aliases" RefId="1541">
                  <TNRef RefId="13" />
                  <LST>
                    <S>cf</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
    </MS>
  </Obj>
</Objs>